{"input": "int add(int a, int b) {\n    return a + b;\n}", "output": "public int add(int a, int b) {\n    return a + b;\n}"}
{"input": "int sum(int a, int b, int c) {\n    return a + b;\n}", "output": "public int add(int a, int b, int c) {\n    return a + b + c;\n}"}
{"input": "int multiply(int a, int b) {\n    return a * b;\n}", "output": "public int multiply(int a, int b) {\n    return a * b;\n}"}
{"input": "bool isEven(int number) {\n    return number % 2 == 0;\n}", "output": "public boolean isEven(int number) {\n    return number % 2 == 0;\n}"}
{"input": "void printMessage() {\n    std::cout << \"Hello, World!\" << std::endl;\n}", "output": "public void printMessage() {\n    System.out.println(\"Hello, World!\");\n}"}
{"input": "int max(int a, int b) {\n    return (a > b) ? a : b;\n}", "output": "public int max(int a, int b) {\n    return (a > b) ? a : b;\n}"}
{"input": "float divide(float x, float y) {\n    return x / y;\n}", "output": "public float divide(float x, float y) {\n    return x / y;\n}"}
{"input": "char getFirstChar(std::string str) {\n    return str[0];\n}", "output": "public char getFirstChar(String str) {\n    return str.charAt(0);\n}"}
{"input": "void swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}", "output": "public void swap(IntWrapper a, IntWrapper b) {\n    int temp = a.value;\n    a.value = b.value;\n    b.value = temp;\n}"}
{"input": "int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}", "output": "public int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}"}
{"input": "bool isPositive(int n) {\n    return n > 0;\n}", "output": "public boolean isPositive(int n) {\n    return n > 0;\n}"}
{"input": "for (int i = 0; i < 10; i++) {\n    cout << i << endl;\n}", "output": "for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}"}
{"input": "int i = 0;\nwhile (i < 10) {\n    cout << i << endl;\n    i++;\n}", "output": "int i = 0;\nwhile (i < 10) {\n    System.out.println(i);\n    i++;\n}"}
{"input": "int a = 5;\nif (a > 0) {\n    cout << \"A is positive\" << endl;\n} else {\n    cout << \"A is not positive\" << endl;\n}", "output": "int a = 5;\nif (a > 0) {\n    System.out.println(\"A is positive\");\n} else {\n    System.out.println(\"A is not positive\");\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Person {\nprivate:\n    string name;\n    int age;\n\npublic:\n    Person(string name, int age) {\n        this->name = name;\n        this->age = age;\n    }\n\n    void introduce() {\n        cout << \"My name is \" << name << \" and I am \" << age << \" years old.\" << endl;\n    }\n};", "output": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void introduce() {\n        System.out.println(\"My name is \" + name + \" and I am \" + age + \" years old.\");\n    }\n}"}
{"input": "#include <iostream>\n\nfloat divide(float a, float b) {\n    return a / b;\n}", "output": "public float divide(float a, float b) {\n    return a / b;\n}"}
{"input": "#include <iostream>\n\ndouble multiply(double a, double b) {\n    return a * b;\n}", "output": "public double multiply(double a, double b) {\n    return a * b;\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\npublic:\n    int value;\n    MyClass(int v) : value(v) {}\n    void display() { cout << value << endl; }\n};","output": "public class MyClass {\n    private int value;\n\n    public MyClass(int v) {\n        value = v;\n    }\n\n    public void display() {\n        System.out.println(value);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 5;\n    int* ptr = &a;\n    cout << *ptr << endl;\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int a = 5;\n        Integer ptr = a;\n        System.out.println(ptr);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Person {\npublic:\n    string name;\n    Person(string name) : name(name) {}\n};\n\nint main() {\n    Person* p = new Person(\"John\");\n    cout << p->name << endl;\n    delete p;\n    return 0;\n}","output": "public class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Person(\"John\");\n        System.out.println(p.name);\n    }\n}"}
{"input": "#include <iostream>\n#include <stdexcept>\nusing namespace std;\n\nint divide(int a, int b) {\n    if (b == 0) throw runtime_error(\"Division by zero\");\n    return a / b;\n}\n\nint main() {\n    try {\n        cout << divide(4, 0) << endl;\n    } catch (const runtime_error& e) {\n        cout << e.what() << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    public static int divide(int a, int b) throws ArithmeticException {\n        if (b == 0) throw new ArithmeticException(\"Division by zero\");\n        return a / b;\n    }\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(divide(4, 0));\n        } catch (ArithmeticException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Animal {\npublic:\n    virtual void sound() { cout << \"Animal sound\" << endl; }\n};\n\nclass Dog : public Animal {\npublic:\n    void sound() override { cout << \"Woof\" << endl; }\n};\n\nint main() {\n    Dog d;\n    d.sound();\n    return 0;\n}","output": "public class Animal {\n    public void sound() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\npublic class Dog extends Animal {\n    @Override\n    public void sound() {\n        System.out.println(\"Woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog d = new Dog();\n        d.sound();\n    }\n}"}
{"input": "#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main() {\n    ifstream file(\"test.txt\");\n    if (file.is_open()) {\n        string line;\n        while (getline(file, line)) {\n            cout << line << endl;\n        }\n        file.close();\n    }\n    return 0;\n}","output": "import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"test.txt\"))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT add(T a, T b) {\n    return a + b;\n}\n\nint main() {\n    cout << add(2, 3) << endl;\n    return 0;\n}","output": "public class Main {\n    public static <T> T add(T a, T b) {\n        return (T) ((Integer) a + (Integer) b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(2, 3));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n    virtual void display() { cout << \"Base class\" << endl; }\n};\n\nclass Derived : public Base {\npublic:\n    void display() override { cout << \"Derived class\" << endl; }\n};\n\nint main() {\n    Derived d;\n    Base* b = &d;\n    b->display();\n    return 0;\n}","output": "public class Base {\n    public void display() {\n        System.out.println(\"Base class\");\n    }\n}\n\npublic class Derived extends Base {\n    @Override\n    public void display() {\n        System.out.println(\"Derived class\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Derived d = new Derived();\n        Base b = d;\n        b.display();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 5;\n    double b = 3.14;\n    cout << static_cast<int>(b) << endl;\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int a = 5;\n        double b = 3.14;\n        System.out.println((int) b);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    cout << sizeof(arr) / sizeof(arr[0]) << endl;\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        System.out.println(arr.length);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Animal {\npublic:\n    virtual void sound() { cout << \"Animal sound\" << endl; }\n};\n\nclass Dog : public Animal {\npublic:\n    void sound() override { cout << \"Woof!\" << endl; }\n};\n\nint main() {\n    Animal* a = new Dog();\n    a->sound();\n    delete a;\n    return 0;\n}","output": "public class Animal {\n    public void sound() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\npublic class Dog extends Animal {\n    @Override\n    public void sound() {\n        System.out.println(\"Woof!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal a = new Dog();\n        a.sound();\n    }\n}"}
{"input": "#include <iostream>\n#include <exception>\nusing namespace std;\n\nclass DivisionByZeroException : public exception {\npublic:\n    const char* what() const throw() {\n        return \"Cannot divide by zero!\";\n    }\n};\n\nint divide(int a, int b) {\n    if (b == 0) throw DivisionByZeroException();\n    return a / b;\n}\n\nint main() {\n    try {\n        cout << divide(10, 0) << endl;\n    } catch (const DivisionByZeroException& e) {\n        cout << e.what() << endl;\n    }\n    return 0;\n}","output": "public class DivisionByZeroException extends Exception {\n    @Override\n    public String getMessage() {\n        return \"Cannot divide by zero!\";\n    }\n}\n\npublic class Main {\n    public static int divide(int a, int b) throws DivisionByZeroException {\n        if (b == 0) throw new DivisionByZeroException();\n        return a / b;\n    }\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(divide(10, 0));\n        } catch (DivisionByZeroException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int i = 1; i <= 5; ++i) {\n        if (i == 3) continue;\n        cout << i << \" \";\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; ++i) {\n            if (i == 3) continue;\n            System.out.print(i + \" \");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\npublic:\n    MyClass() {}\n    void display() { cout << \"Hello, world!\" << endl; }\n};\n\nint main() {\n    MyClass obj;\n    obj.display();\n    return 0;\n}","output": "public class MyClass {\n    public MyClass() {}\n\n    public void display() {\n        System.out.println(\"Hello, world!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass();\n        obj.display();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    cout << factorial(5) << endl;\n    return 0;\n}","output": "public class Main {\n    public static int factorial(int n) {\n        if (n <= 1) return 1;\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 10, b = 20;\n    cout << (a > b ? \"a is greater\" : \"b is greater\") << endl;\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int a = 10, b = 20;\n        System.out.println(a > b ? \"a is greater\" : \"b is greater\");\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(x, y);\n    cout << \"x: \" << x << \", y: \" << y << endl;\n    return 0;\n}","output": "public class Main {\n    public static void swap(int[] a, int[] b) {\n        int temp = a[0];\n        a[0] = b[0];\n        b[0] = temp;\n    }\n\n    public static void main(String[] args) {\n        int x = 10, y = 20;\n        swap(new int[] {} new int[] {y});\n        System.out.println(\"x: \" + x + \", y: \" + y);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> vec = {1, 2, 3, 4, 5};\n    for (int num : vec) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        for (int num : list) {\n            System.out.print(num + \" \");\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <array>\nusing namespace std;\n\nint main() {\n    array<int, 5> arr = {1, 2, 3, 4, 5};\n    cout << arr.size() << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        System.out.println(arr.length);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Point {\nprivate:\n    int x, y;\npublic:\n    Point(int x, int y) : x(x), y(y) {}\n    void display() { cout << \"Point(\" << x << \", \" << y << \")\" << endl; }\n};\n\nint main() {\n    Point p(1, 2);\n    p.display();\n    return 0;\n}","output": "public class Point {\n    private int x, y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public void display() {\n        System.out.println(\"Point(\" + x + \", \" + y + \")\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Point p = new Point(1, 2);\n        p.display();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 10, b = 20;\n    if (a == b) {\n        cout << \"a is equal to b\" << endl;\n    } else {\n        cout << \"a is not equal to b\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int a = 10, b = 20;\n        if (a == b) {\n            System.out.println(\"a is equal to b\");\n        } else {\n            System.out.println(\"a is not equal to b\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Rectangle {\nprivate:\n    int width, height;\npublic:\n    Rectangle(int w, int h) : width(w), height(h) {}\n    int area() { return width * height; }\n};\n\nint main() {\n    Rectangle rect(5, 10);\n    cout << \"Area: \" << rect.area() << endl;\n    return 0;\n}","output": "public class Rectangle {\n    private int width, height;\n\n    public Rectangle(int w, int h) {\n        this.width = w;\n        this.height = h;\n    }\n\n    public int area() {\n        return width * height;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Rectangle rect = new Rectangle(5, 10);\n        System.out.println(\"Area: \" + rect.area());\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = 5;\n    switch (num) {\n        case 1: cout << \"One\" << endl; break;\n        case 5: cout << \"Five\" << endl; break;\n        default: cout << \"Unknown\" << endl; break;\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int num = 5;\n        switch (num) {\n            case 1: System.out.println(\"One\"); break;\n            case 5: System.out.println(\"Five\"); break;\n            default: System.out.println(\"Unknown\"); break;\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int numbers[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; ++i) {\n        cout << numbers[i] << \" \";\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        for (int i = 0; i < 5; i++) {\n            System.out.print(numbers[i] + \" \");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nclass Person {\nprivate:\n    string name;\npublic:\n    Person(string n) : name(n) {}\n    void greet() { cout << \"Hello, \" << name << \"!\" << endl; }\n};\n\nint main() {\n    Person p(\"Alice\");\n    p.greet();\n    return 0;\n}","output": "public class Person {\n    private String name;\n\n    public Person(String n) {\n        this.name = n;\n    }\n\n    public void greet() {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Person(\"Alice\");\n        p.greet();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 10, y = 20;\n    cout << \"Sum: \" << x + y << endl;\n    cout << \"Difference: \" << x - y << endl;\n    cout << \"Product: \" << x * y << endl;\n    cout << \"Quotient: \" << x / y << endl;\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int x = 10, y = 20;\n        System.out.println(\"Sum: \" + (x + y));\n        System.out.println(\"Difference: \" + (x - y));\n        System.out.println(\"Product: \" + (x * y));\n        System.out.println(\"Quotient: \" + (x / y));\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string str = \"Hello, world!\";\n    cout << str.length() << endl;\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        String str = \"Hello, world!\";\n        System.out.println(str.length());\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int i = 0; i < 5; ++i) {\n        if (i == 3) {\n            continue;\n        }\n        cout << i << \" \";\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            if (i == 3) {\n                continue;\n            }\n            System.out.print(i + \" \");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 10, y = 20;\n    if (x > y) {\n        cout << \"x is greater\" << endl;\n    } else {\n        cout << \"y is greater\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int x = 10, y = 20;\n        if (x > y) {\n            System.out.println(\"x is greater\");\n        } else {\n            System.out.println(\"y is greater\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    bool condition = true;\n    if (condition) {\n        cout << \"Condition is true\" << endl;\n    } else {\n        cout << \"Condition is false\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        boolean condition = true;\n        if (condition) {\n            System.out.println(\"Condition is true\");\n        } else {\n            System.out.println(\"Condition is false\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 0, b = 0;\n    if (a == 0 && b == 0) {\n        cout << \"Both are zero\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    public static void main(String[] args) {\n        int a = 0, b = 0;\n        if (a == 0 && b == 0) {\n            System.out.println(\"Both are zero\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum Color { RED, GREEN, BLUE };\n\nint main() {\n    Color c = RED;\n    cout << \"Selected color: \" << c << endl;\n    return 0;\n}","output": "public class Main {\n    enum Color { RED, GREEN, BLUE }\n\n    public static void main(String[] args) {\n        Color c = Color.RED;\n        System.out.println(\"Selected color: \" + c);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum Direction { NORTH, EAST, SOUTH, WEST };\n\nint main() {\n    Direction dir = EAST;\n    if (dir == EAST) {\n        cout << \"Going East\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum Direction { NORTH, EAST, SOUTH, WEST }\n\n    public static void main(String[] args) {\n        Direction dir = Direction.EAST;\n        if (dir == Direction.EAST) {\n            System.out.println(\"Going East\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum Weekday { MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY };\n\nint main() {\n    Weekday today = WEDNESDAY;\n    cout << \"Today is day number: \" << today << endl;\n    return 0;\n}","output": "public class Main {\n    enum Weekday { MONDAY = 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }\n\n    public static void main(String[] args) {\n        Weekday today = Weekday.WEDNESDAY;\n        System.out.println(\"Today is day number: \" + today.ordinal() + 1);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum Status { SUCCESS, FAILURE, PENDING };\n\nint main() {\n    Status currentStatus = PENDING;\n    if (currentStatus == PENDING) {\n        cout << \"Status is pending.\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum Status { SUCCESS, FAILURE, PENDING }\n\n    public static void main(String[] args) {\n        Status currentStatus = Status.PENDING;\n        if (currentStatus == Status.PENDING) {\n            System.out.println(\"Status is pending.\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum Fruit { APPLE = 10, BANANA = 20, CHERRY = 30 };\n\nint main() {\n    Fruit f = BANANA;\n    cout << \"Banana value: \" << f << endl;\n    return 0;\n}","output": "public class Main {\n    enum Fruit { APPLE = 10, BANANA = 20, CHERRY = 30 }\n\n    public static void main(String[] args) {\n        Fruit f = Fruit.BANANA;\n        System.out.println(\"Banana value: \" + f.ordinal());\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum TrafficLight { RED, YELLOW, GREEN };\n\nint main() {\n    TrafficLight light = GREEN;\n    if (light == GREEN) {\n        cout << \"Go!\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum TrafficLight { RED, YELLOW, GREEN }\n\n    public static void main(String[] args) {\n        TrafficLight light = TrafficLight.GREEN;\n        if (light == TrafficLight.GREEN) {\n            System.out.println(\"Go!\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum Size { SMALL = 1, MEDIUM, LARGE };\n\nint main() {\n    Size s = LARGE;\n    if (s == LARGE) {\n        cout << \"Large size selected.\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum Size { SMALL = 1, MEDIUM, LARGE }\n\n    public static void main(String[] args) {\n        Size s = Size.LARGE;\n        if (s == Size.LARGE) {\n            System.out.println(\"Large size selected.\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum LightSwitch { OFF, ON };\n\nint main() {\n    LightSwitch light = ON;\n    if (light == ON) {\n        cout << \"Light is on.\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum LightSwitch { OFF, ON }\n\n    public static void main(String[] args) {\n        LightSwitch light = LightSwitch.ON;\n        if (light == LightSwitch.ON) {\n            System.out.println(\"Light is on.\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum GameLevel { EASY = 1, MEDIUM, HARD };\n\nint main() {\n    GameLevel level = MEDIUM;\n    if (level == MEDIUM) {\n        cout << \"Medium level selected.\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum GameLevel { EASY = 1, MEDIUM, HARD }\n\n    public static void main(String[] args) {\n        GameLevel level = GameLevel.MEDIUM;\n        if (level == GameLevel.MEDIUM) {\n            System.out.println(\"Medium level selected.\");\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nenum DaysOfWeek { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY };\n\nint main() {\n    DaysOfWeek today = FRIDAY;\n    if (today == FRIDAY) {\n        cout << \"TGIF!\" << endl;\n    }\n    return 0;\n}","output": "public class Main {\n    enum DaysOfWeek { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }\n\n    public static void main(String[] args) {\n        DaysOfWeek today = DaysOfWeek.FRIDAY;\n        if (today == DaysOfWeek.FRIDAY) {\n            System.out.println(\"TGIF!\");\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    for_each(numbers.begin(), numbers.end(), [](int num) { cout << num << \" \"; });\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for_each(numbers.begin(), numbers.end(), [&sum](int num) { sum += num; });\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        final int[] sum = {0};\n        numbers.forEach(num -> sum[0] += num);\n        System.out.println(\"Sum: \" + sum[0]);\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto square = [](int num) { return num * num; };\n    for (int num : numbers) {\n        cout << square(num) << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        numbers.forEach(num -> System.out.print((num * num) + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto isEven = [](int num) { return num % 2 == 0; };\n    vector<int> evenNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(evenNumbers), isEven);\n    for (int num : evenNumbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> evenNumbers = new ArrayList<>();\n        numbers.stream().filter(num -> num % 2 == 0).forEach(evenNumbers::add);\n        evenNumbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <functional>\nusing namespace std;\n\nint main() {\n    auto add = [](int a, int b) { return a + b; };\n    cout << \"Sum: \" << add(5, 10) << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        BiFunction<Integer, Integer, Integer> add = (a, b) -> a + b;\n        System.out.println(\"Sum: \" + add.apply(5, 10));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto multiplyByTwo = [](int num) { return num * 2; };\n    for (int num : numbers) {\n        cout << multiplyByTwo(num) << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        numbers.forEach(num -> System.out.print((num * 2) + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto greaterThanThree = [](int num) { return num > 3; };\n    int count = count_if(numbers.begin(), numbers.end(), greaterThanThree);\n    cout << \"Numbers greater than 3: \" << count << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        long count = numbers.stream().filter(num -> num > 3).count();\n        System.out.println(\"Numbers greater than 3: \" + count);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto print = [](auto value) { cout << value << endl; };\n    print(10);\n    print(\"Hello, world!\");\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Consumer<Object> print = value -> System.out.println(value);\n        print.accept(10);\n        print.accept(\"Hello, world!\");\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto greet = [](const string& name) { cout << \"Hello, \" << name << \"!\" << endl; };\n    greet(\"Alice\");\n    greet(\"Bob\");\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Consumer<String> greet = name -> System.out.println(\"Hello, \" + name + \"!\");\n        greet.accept(\"Alice\");\n        greet.accept(\"Bob\");\n    }\n}"}
{"input": "#include <iostream>\n#include <functional>\nusing namespace std;\n\nint main() {\n    auto subtract = [](int a, int b) { return a - b; };\n    cout << \"Difference: \" << subtract(15, 5) << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        BiFunction<Integer, Integer, Integer> subtract = (a, b) -> a - b;\n        System.out.println(\"Difference: \" + subtract.apply(15, 5));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto squareRoot = [](double num) { return sqrt(num); };\n    cout << \"Square root of 16: \" << squareRoot(16) << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Function<Double, Double> squareRoot = num -> Math.sqrt(num);\n        System.out.println(\"Square root of 16: \" + squareRoot.apply(16.0));\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto isOdd = [](int num) { return num % 2 != 0; };\n    auto result = find_if(numbers.begin(), numbers.end(), isOdd);\n    if (result != numbers.end()) {\n        cout << \"First odd number: \" << *result << endl;\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        Optional<Integer> result = numbers.stream().filter(num -> num % 2 != 0).findFirst();\n        result.ifPresent(num -> System.out.println(\"First odd number: \" + num));\n    }\n}"}
{"input": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {5, 2, 9, 1, 5, 6};\n    sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });\n    for (int num : numbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(5, 2, 9, 1, 5, 6);\n        numbers.sort((a, b) -> a < b ? -1 : (a > b ? 1 : 0));\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto addOne = [](int num) { return num + 1; };\n    transform(numbers.begin(), numbers.end(), numbers.begin(), addOne);\n    for (int num : numbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        numbers.replaceAll(num -> num + 1);\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto multiplyByThree = [](int num) { return num * 3; };\n    for (auto& num : numbers) {\n        num = multiplyByThree(num);\n    }\n    for (auto num : numbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        numbers.replaceAll(num -> num * 3);\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    for (auto num : numbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (auto num : numbers) {\n        sum += num;\n    }\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum: \" + sum);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto isEven = [](int num) { return num % 2 == 0; };\n    int count = count_if(numbers.begin(), numbers.end(), isEven);\n    cout << \"Even numbers count: \" << count << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        long count = numbers.stream().filter(num -> num % 2 == 0).count();\n        System.out.println(\"Even numbers count: \" + count);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto isGreaterThanThree = [](int num) { return num > 3; };\n    auto result = find_if(numbers.begin(), numbers.end(), isGreaterThanThree);\n    if (result != numbers.end()) {\n        cout << \"First number greater than 3: \" << *result << endl;\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        Optional<Integer> result = numbers.stream().filter(num -> num > 3).findFirst();\n        result.ifPresent(num -> System.out.println(\"First number greater than 3: \" + num));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto square = [](int num) { return num * num; };\n    transform(numbers.begin(), numbers.end(), numbers.begin(), square);\n    for (auto num : numbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        numbers.replaceAll(num -> num * num);\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto multiplyByTwo = [](int num) { return num * 2; };\n    for (auto num : numbers) {\n        cout << multiplyByTwo(num) << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        numbers.forEach(num -> System.out.print((num * 2) + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {5, 4, 3, 2, 1};\n    sort(numbers.begin(), numbers.end());\n    for (auto num : numbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(5, 4, 3, 2, 1);\n        numbers.sort(Comparator.naturalOrder());\n        numbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    int sum = accumulate(numbers.begin(), numbers.end(), 0);\n    cout << \"Sum of numbers: \" << sum << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of numbers: \" + sum);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto isEven = [](int num) { return num % 2 == 0; };\n    vector<int> evenNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(evenNumbers), isEven);\n    for (auto num : evenNumbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> evenNumbers = new ArrayList<>();\n        numbers.stream().filter(num -> num % 2 == 0).forEach(evenNumbers::add);\n        evenNumbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto sum = [](int a, int b) { return a + b; };\n    int total = accumulate(numbers.begin(), numbers.end(), 0, sum);\n    cout << \"Total sum: \" << total << endl;\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        int total = numbers.stream().reduce(0, (a, b) -> a + b);\n        System.out.println(\"Total sum: \" + total);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto multiply = [](int num) { return num * 10; };\n    vector<int> transformedNumbers;\n    transform(numbers.begin(), numbers.end(), back_inserter(transformedNumbers), multiply);\n    for (auto num : transformedNumbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> transformedNumbers = new ArrayList<>();\n        numbers.stream().map(num -> num * 10).forEach(transformedNumbers::add);\n        transformedNumbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto filterOdd = [](int num) { return num % 2 != 0; };\n    vector<int> oddNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(oddNumbers), filterOdd);\n    for (auto num : oddNumbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> oddNumbers = new ArrayList<>();\n        numbers.stream().filter(num -> num % 2 != 0).forEach(oddNumbers::add);\n        oddNumbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    vector<int> doubledNumbers;\n    transform(numbers.begin(), numbers.end(), back_inserter(doubledNumbers), [](int num) { return num * 2; });\n    for (auto num : doubledNumbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> doubledNumbers = new ArrayList<>();\n        numbers.stream().map(num -> num * 2).forEach(doubledNumbers::add);\n        doubledNumbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    auto isGreaterThanTwo = [](int num) { return num > 2; };\n    vector<int> filteredNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(filteredNumbers), isGreaterThanTwo);\n    for (auto num : filteredNumbers) {\n        cout << num << \" \";\n    }\n    return 0;\n}","output": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> filteredNumbers = new ArrayList<>();\n        numbers.stream().filter(num -> num > 2).forEach(filteredNumbers::add);\n        filteredNumbers.forEach(num -> System.out.print(num + \" \"));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT add(T a, T b) {\n    return a + b;\n}\n\nint main() {\n    cout << add(5, 10) << endl;\n    return 0;\n}", "output": "public class Main {\n    public static <T> T add(T a, T b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(5, 10));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\ntemplate <typename T>\nvoid printVector(const vector<T>& vec) {\n    for (const T& item : vec) {\n        cout << item << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    vector<int> vec = {1, 2, 3, 4, 5};\n    printVector(vec);\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static <T> void printVector(List<T> vec) {\n        for (T item : vec) {\n            System.out.print(item + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        List<Integer> vec = Arrays.asList(1, 2, 3, 4, 5);\n        printVector(vec);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\n\nint main() {\n    cout << multiply(3.5, 2.5) << endl;\n    return 0;\n}", "output": "public class Main {\n    public static <T> T multiply(T a, T b) {\n        return a * b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(multiply(3.5, 2.5));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nvoid swapValues(T& a, T& b) {\n    T temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swapValues(x, y);\n    cout << \"x: \" << x << \", y: \" << y << endl;\n    return 0;\n}", "output": "public class Main {\n    public static <T> void swapValues(T[] a, T[] b) {\n        T temp = a[0];\n        a[0] = b[0];\n        b[0] = temp;\n    }\n\n    public static void main(String[] args) {\n        int x = 10, y = 20;\n        swapValues(new Integer[] {x}, new Integer[] {y});\n        System.out.println(\"x: \" + x + \", y: \" + y);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\ntemplate <typename T>\nT sumVector(const vector<T>& vec) {\n    T sum = 0;\n    for (const T& item : vec) {\n        sum += item;\n    }\n    return sum;\n}\n\nint main() {\n    vector<int> vec = {1, 2, 3, 4, 5};\n    cout << sumVector(vec) << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static <T> T sumVector(List<T> vec) {\n        T sum = 0;\n        for (T item : vec) {\n            sum += item;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> vec = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(sumVector(vec));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT subtract(T a, T b) {\n    return a - b;\n}\n\nint main() {\n    cout << subtract(10, 5) << endl;\n    return 0;\n}", "output": "public class Main {\n    public static <T> T subtract(T a, T b) {\n        return a - b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(subtract(10, 5));\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nvoid printValue(T value) {\n    cout << value << endl;\n}\n\nint main() {\n    printValue(42);\n    printValue(3.14);\n    return 0;\n}", "output": "public class Main {\n    public static <T> void printValue(T value) {\n        System.out.println(value);\n    }\n\n    public static void main(String[] args) {\n        printValue(42);\n        printValue(3.14);\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\ntemplate <typename T>\nvoid displayVector(const vector<T>& vec) {\n    for (auto& val : vec) {\n        cout << val << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    vector<string> vec = {\"apple\", \"banana\", \"cherry\"};\n    displayVector(vec);\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static <T> void displayVector(List<T> vec) {\n        for (T val : vec) {\n            System.out.print(val + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        List<String> vec = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        displayVector(vec);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT divide(T a, T b) {\n    if (b == 0) {\n        throw \"Division by zero!\";\n    }\n    return a / b;\n}\n\nint main() {\n    try {\n        cout << divide(10, 2) << endl;\n    } catch (const char* e) {\n        cout << e << endl;\n    }\n    return 0;\n}", "output": "public class Main {\n    public static <T> T divide(T a, T b) throws Exception {\n        if (b.equals(0)) {\n            throw new Exception(\"Division by zero!\");\n        }\n        return a / b;\n    }\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(divide(10, 2));\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <array>\nusing namespace std;\n\ntemplate <typename T>\nT arraySum(const array<T, 5>& arr) {\n    T sum = 0;\n    for (const T& item : arr) {\n        sum += item;\n    }\n    return sum;\n}\n\nint main() {\n    array<int, 5> arr = {1, 2, 3, 4, 5};\n    cout << arraySum(arr) << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static <T> T arraySum(T[] arr) {\n        T sum = 0;\n        for (T item : arr) {\n            sum += item;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Integer[] arr = {1, 2, 3, 4, 5};\n        System.out.println(arraySum(arr));\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n\nvoid print_message() {\n    std::cout << \"Hello from thread!\" << std::endl;\n}\n\nint main() {\n    std::thread t(print_message);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(() -> System.out.println(\"Hello from thread!\"));\n        t.start();\n        try {\n            t.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n\nvoid task1() { std::cout << \"Task 1\\n\"; }\nvoid task2() { std::cout << \"Task 2\\n\"; }\n\nint main() {\n    std::thread t1(task1);\n    std::thread t2(task2);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> System.out.println(\"Task 1\"));\n        Thread t2 = new Thread(() -> System.out.println(\"Task 2\"));\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n\nvoid task(int id) { std::cout << \"Task \" << id << \"\\n\"; }\n\nint main() {\n    std::thread t1(task, 1);\n    std::thread t2(task, 2);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        Runnable task = () -> System.out.println(\"Task\");\n        Thread t1 = new Thread(task);\n        Thread t2 = new Thread(task);\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <mutex>\n\nstd::mutex mtx;\n\nvoid print_hello() {\n    std::lock_guard<std::mutex> guard(mtx);\n    std::cout << \"Hello from thread with mutex!\" << std::endl;\n}\n\nint main() {\n    std::thread t1(print_hello);\n    std::thread t2(print_hello);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "import java.util.concurrent.locks.ReentrantLock;\n\npublic class Main {\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    public static void printHello() {\n        lock.lock();\n        try {\n            System.out.println(\"Hello from thread with lock!\");\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(Main::printHello);\n        Thread t2 = new Thread(Main::printHello);\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <atomic>\n\nstd::atomic<int> counter(0);\n\nvoid increment() {\n    for (int i = 0; i < 1000; ++i) {\n        counter.fetch_add(1, std::memory_order_relaxed);\n    }\n}\n\nint main() {\n    std::thread t1(increment);\n    std::thread t2(increment);\n    t1.join();\n    t2.join();\n    std::cout << \"Counter: \" << counter.load() << std::endl;\n    return 0;\n}", "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class Main {\n    private static final AtomicInteger counter = new AtomicInteger(0);\n\n    public static void increment() {\n        for (int i = 0; i < 1000; ++i) {\n            counter.incrementAndGet();\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(Main::increment);\n        Thread t2 = new Thread(Main::increment);\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Counter: \" + counter.get());\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid print_message_with_delay() {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    std::cout << \"Delayed message!\" << std::endl;\n}\n\nint main() {\n    std::thread t(print_message_with_delay);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void printMessageWithDelay() throws InterruptedException {\n        Thread.sleep(2000);\n        System.out.println(\"Delayed message!\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(Main::printMessageWithDelay);\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n\nvoid print_numbers(int start, int end) {\n    for (int i = start; i <= end; ++i) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::thread t1(print_numbers, 1, 5);\n    std::thread t2(print_numbers, 6, 10);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    public static void printNumbers(int start, int end) {\n        for (int i = start; i <= end; ++i) {\n            System.out.print(i + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> printNumbers(1, 5));\n        Thread t2 = new Thread(() -> printNumbers(6, 10));\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <future>\n\nstd::future<int> async_add(int a, int b) {\n    return std::async(std::launch::async, [a, b] { return a + b; });\n}\n\nint main() {\n    auto result = async_add(10, 20);\n    std::cout << \"Result: \" << result.get() << std::endl;\n    return 0;\n}", "output": "import java.util.concurrent.CompletableFuture;\n\npublic class Main {\n    public static CompletableFuture<Integer> asyncAdd(int a, int b) {\n        return CompletableFuture.supplyAsync(() -> a + b);\n    }\n\n    public static void main(String[] args) throws InterruptedException, java.util.concurrent.ExecutionException {\n        CompletableFuture<Integer> result = asyncAdd(10, 20);\n        System.out.println(\"Result: \" + result.get());\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <condition_variable>\n\nstd::mutex mtx;\nstd::condition_variable cv;\n\nvoid wait_for_signal() {\n    std::unique_lock<std::mutex> lock(mtx);\n    cv.wait(lock); // wait until notified\n    std::cout << \"Notified!\" << std::endl;\n}\n\nint main() {\n    std::thread t(wait_for_signal);\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n    cv.notify_one();\n    t.join();\n    return 0;\n}", "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.locks.Condition;\n\npublic class Main {\n    private static final ReentrantLock lock = new ReentrantLock();\n    private static final Condition condition = lock.newCondition();\n\n    public static void waitForSignal() throws InterruptedException {\n        lock.lock();\n        try {\n            condition.await(); // wait until notified\n            System.out.println(\"Notified!\");\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(Main::waitForSignal);\n        t.start();\n        Thread.sleep(1000);\n        lock.lock();\n        try {\n            condition.signal();\n        } finally {\n            lock.unlock();\n        }\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid hello() {\n    cout << \"Hello from thread!\" << endl;\n}\n\nint main() {\n    thread t(hello);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> System.out.println(\"Hello from thread!\"));\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid printNumbers() {\n    for (int i = 0; i < 5; ++i) {\n        cout << i << endl;\n    }\n}\n\nint main() {\n    thread t(printNumbers);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            for (int i = 0; i < 5; i++) {\n                System.out.println(i);\n            }\n        });\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <chrono>\nusing namespace std;\n\nvoid task() {\n    this_thread::sleep_for(chrono::seconds(1));\n    cout << \"Task finished!\" << endl;\n}\n\nint main() {\n    thread t(task);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"Task finished!\");\n        });\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid greet(string name) {\n    cout << \"Hello, \" << name << endl;\n}\n\nint main() {\n    thread t(greet, \"Alice\");\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> System.out.println(\"Hello, Alice\"));\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid multiply(int a, int b) {\n    cout << a * b << endl;\n}\n\nint main() {\n    thread t(multiply, 3, 4);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> System.out.println(3 * 4));\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid display() {\n    cout << \"Thread running\" << endl;\n}\n\nint main() {\n    thread t1(display);\n    thread t2(display);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Runnable display = () -> System.out.println(\"Thread running\");\n        Thread t1 = new Thread(display);\n        Thread t2 = new Thread(display);\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <chrono>\nusing namespace std;\n\nvoid delayedHello() {\n    this_thread::sleep_for(chrono::milliseconds(500));\n    cout << \"Hello after delay\" << endl;\n}\n\nint main() {\n    thread t(delayedHello);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"Hello after delay\");\n        });\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid printMessage() {\n    cout << \"Message from thread\" << endl;\n}\n\nint main() {\n    thread t(printMessage);\n    t.detach();\n    cout << \"Main thread finished\" << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(() -> System.out.println(\"Message from thread\"));\n        t.start();\n        System.out.println(\"Main thread finished\");\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid task1() {\n    cout << \"Task 1 running\" << endl;\n}\n\nvoid task2() {\n    cout << \"Task 2 running\" << endl;\n}\n\nint main() {\n    thread t1(task1);\n    thread t2(task2);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> System.out.println(\"Task 1 running\"));\n        Thread t2 = new Thread(() -> System.out.println(\"Task 2 running\"));\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid printSum(int a, int b) {\n    cout << \"Sum: \" << (a + b) << endl;\n}\n\nint main() {\n    thread t(printSum, 5, 7);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> System.out.println(\"Sum: \" + (5 + 7)));\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <mutex>\nusing namespace std;\n\nmutex mtx;\n\nvoid printSafe(int id) {\n    mtx.lock();\n    cout << \"Thread \" << id << \" is running\" << endl;\n    mtx.unlock();\n}\n\nint main() {\n    thread t1(printSafe, 1);\n    thread t2(printSafe, 2);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    static final Object lock = new Object();\n    static void printSafe(int id) {\n        synchronized(lock) {\n            System.out.println(\"Thread \" + id + \" is running\");\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> printSafe(1));\n        Thread t2 = new Thread(() -> printSafe(2));\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <mutex>\nusing namespace std;\n\nmutex mtx;\n\nvoid criticalSection() {\n    lock_guard<mutex> guard(mtx);\n    cout << \"In critical section\" << endl;\n}\n\nint main() {\n    thread t1(criticalSection);\n    thread t2(criticalSection);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "public class Main {\n    static final Object lock = new Object();\n    static void criticalSection() {\n        synchronized(lock) {\n            System.out.println(\"In critical section\");\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(Main::criticalSection);\n        Thread t2 = new Thread(Main::criticalSection);\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <vector>\nusing namespace std;\n\nvoid worker(int id) {\n    cout << \"Worker \" << id << \" done\" << endl;\n}\n\nint main() {\n    vector<thread> threads;\n    for (int i = 0; i < 5; ++i) {\n        threads.emplace_back(worker, i);\n    }\n    for (auto& t : threads) {\n        t.join();\n    }\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread[] threads = new Thread[5];\n        for (int i = 0; i < 5; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> System.out.println(\"Worker \" + id + \" done\"));\n            threads[i].start();\n        }\n        for (Thread t : threads) {\n            t.join();\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <mutex>\nusing namespace std;\n\nmutex m;\nint counter = 0;\n\nvoid increment() {\n    for (int i = 0; i < 1000; ++i) {\n        lock_guard<mutex> lock(m);\n        ++counter;\n    }\n}\n\nint main() {\n    thread t1(increment);\n    thread t2(increment);\n    t1.join();\n    t2.join();\n    cout << counter << endl;\n    return 0;\n}", "output": "public class Main {\n    static int counter = 0;\n    static final Object lock = new Object();\n    static void increment() {\n        for (int i = 0; i < 1000; i++) {\n            synchronized(lock) {\n                counter++;\n            }\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(Main::increment);\n        Thread t2 = new Thread(Main::increment);\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n        System.out.println(counter);\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\nusing namespace std;\n\nmutex m;\ncondition_variable cv;\nbool ready = false;\n\nvoid waitForSignal() {\n    unique_lock<mutex> lk(m);\n    cv.wait(lk, []{ return ready; });\n    cout << \"Thread proceeding\" << endl;\n}\n\nvoid sendSignal() {\n    this_thread::sleep_for(chrono::seconds(1));\n    {\n        lock_guard<mutex> lk(m);\n        ready = true;\n    }\n    cv.notify_one();\n}\n\nint main() {\n    thread t1(waitForSignal);\n    thread t2(sendSignal);\n    t1.join();\n    t2.join();\n    return 0;\n}", "output": "import java.util.concurrent.*;\n\npublic class Main {\n    static final Object lock = new Object();\n    static boolean ready = false;\n\n    static void waitForSignal() {\n        synchronized(lock) {\n            while (!ready) {\n                try {\n                    lock.wait();\n                } catch (InterruptedException e) {}\n            }\n            System.out.println(\"Thread proceeding\");\n        }\n    }\n\n    static void sendSignal() {\n        try { Thread.sleep(1000); } catch (InterruptedException e) {}\n        synchronized(lock) {\n            ready = true;\n            lock.notify();\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(Main::waitForSignal);\n        Thread t2 = new Thread(Main::sendSignal);\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <mutex>\nusing namespace std;\n\nclass Counter {\n    int value;\n    mutex m;\npublic:\n    Counter() : value(0) {}\n    void increment() {\n        lock_guard<mutex> lock(m);\n        value++;\n    }\n    int get() {\n        lock_guard<mutex> lock(m);\n        return value;\n    }\n};\n\nint main() {\n    Counter c;\n    thread t1([&]{ for (int i = 0; i < 1000; ++i) c.increment(); });\n    thread t2([&]{ for (int i = 0; i < 1000; ++i) c.increment(); });\n    t1.join();\n    t2.join();\n    cout << c.get() << endl;\n    return 0;\n}", "output": "public class Main {\n    static class Counter {\n        private int value = 0;\n        public synchronized void increment() {\n            value++;\n        }\n        public synchronized int get() {\n            return value;\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Counter c = new Counter();\n        Thread t1 = new Thread(() -> { for (int i = 0; i < 1000; i++) c.increment(); });\n        Thread t2 = new Thread(() -> { for (int i = 0; i < 1000; i++) c.increment(); });\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n        System.out.println(c.get());\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <atomic>\nusing namespace std;\n\natomic<int> counter(0);\n\nvoid increment() {\n    for (int i = 0; i < 1000; ++i) {\n        counter++;\n    }\n}\n\nint main() {\n    thread t1(increment);\n    thread t2(increment);\n    t1.join();\n    t2.join();\n    cout << counter << endl;\n    return 0;\n}", "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class Main {\n    static AtomicInteger counter = new AtomicInteger(0);\n    static void increment() {\n        for (int i = 0; i < 1000; i++) {\n            counter.incrementAndGet();\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(Main::increment);\n        Thread t2 = new Thread(Main::increment);\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n        System.out.println(counter);\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\nusing namespace std;\n\nvoid countdown(int from) {\n    while (from > 0) {\n        cout << from-- << endl;\n        this_thread::sleep_for(chrono::milliseconds(200));\n    }\n}\n\nint main() {\n    thread t(countdown, 5);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    static void countdown(int from) {\n        while (from > 0) {\n            System.out.println(from--);\n            try { Thread.sleep(200); } catch (InterruptedException e) {}\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> countdown(5));\n        t.start();\n        t.join();\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <vector>\nusing namespace std;\n\nvoid task(int id) {\n    cout << \"Task \" << id << \" running\" << endl;\n}\n\nint main() {\n    vector<thread> workers;\n    for (int i = 0; i < 4; ++i) {\n        workers.emplace_back(task, i);\n    }\n    for (auto& t : workers) {\n        t.join();\n    }\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread[] workers = new Thread[4];\n        for (int i = 0; i < 4; i++) {\n            int id = i;\n            workers[i] = new Thread(() -> System.out.println(\"Task \" + id + \" running\"));\n            workers[i].start();\n        }\n        for (Thread t : workers) {\n            t.join();\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <thread>\n#include <chrono>\nusing namespace std;\n\nvoid showTime() {\n    for (int i = 0; i < 3; ++i) {\n        cout << \"Tick\" << endl;\n        this_thread::sleep_for(chrono::seconds(1));\n    }\n}\n\nint main() {\n    thread t(showTime);\n    t.join();\n    return 0;\n}", "output": "public class Main {\n    static void showTime() {\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Tick\");\n            try { Thread.sleep(1000); } catch (InterruptedException e) {}\n        }\n    }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(Main::showTime);\n        t.start();\n        t.join();\n    }\n}"}
{"input": "class Task {\npublic:\n    void run() {}\n};", "output": "import java.lang.annotation.*;\nimport java.lang.reflect.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface RunMe {}\n\nclass Task {\n    @RunMe\n    public void run() {}\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Task t = new Task();\n        for (Method m : t.getClass().getDeclaredMethods()) {\n            if (m.isAnnotationPresent(RunMe.class)) {\n                m.invoke(t);\n            }\n        }\n    }\n}"}
{"input": "class Processor {\npublic:\n    void process() {}\n};", "output": "import java.lang.annotation.*;\nimport java.lang.reflect.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface Important {}\n\nclass Processor {\n    @Important\n    public void process() {}\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        for (Method m : Processor.class.getDeclaredMethods()) {\n            if (m.isAnnotationPresent(Important.class)) {\n                System.out.println(\"Important method: \" + m.getName());\n            }\n        }\n    }\n}"}
{"input": "class Worker {\npublic:\n    void doJob() {}\n};", "output": "import java.lang.annotation.*;\nimport java.lang.reflect.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface Execute {}\n\nclass Worker {\n    @Execute\n    public void doJob() {\n        System.out.println(\"Doing job\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Worker w = new Worker();\n        for (Method m : w.getClass().getDeclaredMethods()) {\n            if (m.isAnnotationPresent(Execute.class)) {\n                m.invoke(w);\n            }\n        }\n    }\n}"}
{"input": "class Foo {};", "output": "public class Foo {}\n\npublic class Main {\n    public static void main(String[] args) {\n        Foo foo = new Foo();\n        System.out.println(\"Class name: \" + foo.getClass().getName());\n    }\n}"}
{"input": "class Entity {\npublic:\n    int id;\n};", "output": "import java.lang.reflect.*;\n\nclass Entity {\n    public int id = 42;\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Entity e = new Entity();\n        Field field = e.getClass().getField(\"id\");\n        System.out.println(\"Field value: \" + field.get(e));\n    }\n}"}
{"input": "class Sample {};", "output": "class Sample {}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Class<?> clazz = Sample.class;\n        Object obj = clazz.getDeclaredConstructor().newInstance();\n        System.out.println(\"Created: \" + obj.getClass().getSimpleName());\n    }\n}"}
{"input": "class Action {\n    void run() {}\n};", "output": "import java.lang.annotation.*;\nimport java.lang.reflect.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface NeedsLog {}\n\nclass Action {\n    @NeedsLog\n    public void run() {}\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Method m = Action.class.getMethod(\"run\");\n        if (m.isAnnotationPresent(NeedsLog.class)) {\n            System.out.println(\"Logging enabled for: \" + m.getName());\n        }\n    }\n}"}
{"input": "class Manager {\n    void start() {}\n    void stop() {}\n};", "output": "import java.lang.reflect.*;\n\nclass Manager {\n    public void start() {}\n    public void stop() {}\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        for (Method m : Manager.class.getDeclaredMethods()) {\n            System.out.println(\"Method: \" + m.getName());\n        }\n    }\n}"}
{"input": "class Logic {\n    void handle() {}\n};", "output": "import java.lang.reflect.*;\n\nclass Logic {\n    public void handle() {\n        System.out.println(\"Handling\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Logic l = new Logic();\n        Method m = l.getClass().getMethod(\"handle\");\n        m.invoke(l);\n    }\n}"}
{"input": "class Info {\n    int age;\n};", "output": "import java.lang.reflect.*;\n\nclass Info {\n    public int age;\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Field f = Info.class.getField(\"age\");\n        if (f.getType() == int.class) {\n            System.out.println(\"Integer field: \" + f.getName());\n        }\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"output.txt\");\n    file << \"Hello\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileWriter writer = new FileWriter(\"output.txt\");\n        writer.write(\"Hello\");\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ifstream file(\"input.txt\");\n    string line;\n    getline(file, line);\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n        String line = reader.readLine();\n        reader.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    fstream file(\"data.txt\", ios::in | ios::out);\n    file << \"Test\";\n    file.seekg(0);\n    string result;\n    file >> result;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        RandomAccessFile file = new RandomAccessFile(\"data.txt\", \"rw\");\n        file.writeBytes(\"Test\");\n        file.seek(0);\n        String result = file.readLine();\n        file.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ifstream file(\"file.txt\");\n    char c;\n    while (file.get(c)) {}\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileReader reader = new FileReader(\"file.txt\");\n        int ch;\n        while ((ch = reader.read()) != -1) {}\n        reader.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ofstream file(\"log.txt\", ios::app);\n    file << \"Append\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileWriter fw = new FileWriter(\"log.txt\", true);\n        fw.write(\"Append\");\n        fw.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ifstream file(\"nums.txt\");\n    int x;\n    while (file >> x) {}\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"nums.txt\"));\n        while (sc.hasNextInt()) {\n            int x = sc.nextInt();\n        }\n        sc.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ofstream file(\"binary.dat\", ios::binary);\n    int x = 123;\n    file.write((char*)&x, sizeof(x));\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(\"binary.dat\"));\n        dos.writeInt(123);\n        dos.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ifstream file(\"binary.dat\", ios::binary);\n    int x;\n    file.read((char*)&x, sizeof(x));\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        DataInputStream dis = new DataInputStream(new FileInputStream(\"binary.dat\"));\n        int x = dis.readInt();\n        dis.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ofstream file(\"multi.txt\");\n    file << \"Line1\\n\" << \"Line2\\n\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"multi.txt\"));\n        writer.write(\"Line1\\n\");\n        writer.write(\"Line2\\n\");\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ifstream file(\"text.txt\");\n    string word;\n    while (file >> word) {}\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(new File(\"text.txt\"));\n        while (scanner.hasNext()) {\n            String word = scanner.next();\n        }\n        scanner.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ofstream file(\"numbers.txt\");\n    for (int i = 1; i <= 5; ++i) file << i << endl;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"numbers.txt\"));\n        for (int i = 1; i <= 5; i++) writer.write(i + \"\\n\");\n        writer.close();n    }\n}"}
{"input": "#include <fstream>\n#include <vector>\nusing namespace std;\nint main() {\n    vector<string> lines = {\"a\", \"b\", \"c\"};\n    ofstream file(\"abc.txt\");\n    for (const auto& line : lines) file << line << endl;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        List<String> lines = Arrays.asList(\"a\", \"b\", \"c\");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"abc.txt\"));\n        for (String line : lines) writer.write(line + \"\\n\");\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"data.csv\");\n    file << \"name,age\\nJohn,30\\nJane,25\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileWriter fw = new FileWriter(\"data.csv\");\n        fw.write(\"name,age\\nJohn,30\\nJane,25\");\n        fw.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ifstream file(\"info.txt\");\n    string s1, s2;\n    file >> s1 >> s2;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"info.txt\"));\n        String s1 = sc.next();\n        String s2 = sc.next();\n        sc.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    string filename = \"test.txt\";\n    ofstream file(filename);\n    file << \"Testing\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        String filename = \"test.txt\";\n        FileWriter fw = new FileWriter(filename);\n        fw.write(\"Testing\");\n        fw.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file1(\"file1.txt\");\n    file1 << \"One\";\n    file1.close();\n    ofstream file2(\"file2.txt\");\n    file2 << \"Two\";\n    file2.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileWriter fw1 = new FileWriter(\"file1.txt\");\n        fw1.write(\"One\");\n        fw1.close();\n        FileWriter fw2 = new FileWriter(\"file2.txt\");\n        fw2.write(\"Two\");\n        fw2.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"upper.txt\");\n    string text = \"hello\";\n    for (char c : text) file << (char)toupper(c);\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"upper.txt\"));\n        String text = \"hello\";\n        for (char c : text.toCharArray()) writer.write(Character.toUpperCase(c));\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ifstream file(\"empty.txt\");\n    bool isEmpty = file.peek() == ifstream::traits_type::eof();\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"empty.txt\");\n        boolean isEmpty = file.length() == 0;\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"path/file.txt\");\n    file << \"Nested\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        new File(\"path\").mkdirs();\n        FileWriter fw = new FileWriter(\"path/file.txt\");\n        fw.write(\"Nested\");\n        fw.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    string filename = \"test.txt\";\n    ifstream file(filename);\n    if (!file) return 1;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) {\n        String filename = \"test.txt\";\n        File f = new File(filename);\n        if (!f.exists()) return;\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"log.txt\", ios::app);\n    file << \"Log entry\\n\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileWriter fw = new FileWriter(\"log.txt\", true);\n        fw.write(\"Log entry\\n\");\n        fw.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ifstream file(\"numbers.txt\");\n    int x;\n    int sum = 0;\n    while (file >> x) sum += x;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"numbers.txt\"));\n        int sum = 0;\n        while (sc.hasNextInt()) sum += sc.nextInt();\n        sc.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"multi.txt\");\n    for (int i = 1; i <= 10; ++i) file << i << \",\" << i*i << endl;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"multi.txt\"));\n        for (int i = 1; i <= 10; i++) writer.write(i + \",\" + (i * i) + \"\\n\");\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    string line;\n    ifstream file(\"lines.txt\");\n    while (getline(file, line)) {}\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"lines.txt\"));\n        String line;\n        while ((line = reader.readLine()) != null) {}\n        reader.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"unicode.txt\");\n    file << u8\"Árvíztűrő tükörfúrógép\";\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.nio.charset.StandardCharsets;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"unicode.txt\"), StandardCharsets.UTF_8));\n        writer.write(\"Árvíztűrő tükörfúrógép\");\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ifstream file(\"count.txt\");\n    int count = 0;\n    string word;\n    while (file >> word) count++;\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"count.txt\"));\n        int count = 0;\n        while (sc.hasNext()) {\n            sc.next();\n            count++;\n        }\n        sc.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ofstream file(\"chars.txt\");\n    for (char c = 'a'; c <= 'z'; ++c) file << c << ' ';\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"chars.txt\"));\n        for (char c = 'a'; c <= 'z'; c++) writer.write(c + \" \");\n        writer.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ifstream file(\"binary.dat\", ios::binary);\n    char buffer[10];\n    file.read(buffer, 10);\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileInputStream fis = new FileInputStream(\"binary.dat\");\n        byte[] buffer = new byte[10];\n        fis.read(buffer);\n        fis.close();\n    }\n}"}
{"input": "#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n    ofstream file(\"hello.txt\");\n    file.put('H');\n    file.put('i');\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FileWriter fw = new FileWriter(\"hello.txt\");\n        fw.write('H');\n        fw.write('i');\n        fw.close();\n    }\n}"}
{"input": "#include <fstream>\nusing namespace std;\nint main() {\n    ifstream file(\"check.txt\");\n    bool opened = file.is_open();\n    file.close();\n    return 0;\n}", "output": "import java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"check.txt\");\n        boolean opened = file.exists();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"hello\";\n    s += \" world\";\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"hello\";\n        s += \" world\";\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"abcdef\";\n    char c = s[2];\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"abcdef\";\n        char c = s.charAt(2);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"apple\";\n    int len = s.length();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"apple\";\n        int len = s.length();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"banana\";\n    bool found = s.find(\"na\") != string::npos;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"banana\";\n        boolean found = s.contains(\"na\");\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"grape\";\n    string sub = s.substr(1, 3);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"grape\";\n        String sub = s.substring(1, 4);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"  spaced  \";\n    s.erase(0, s.find_first_not_of(' '));\n    s.erase(s.find_last_not_of(' ') + 1);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"  spaced  \";\n        s = s.strip();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string a = \"one\";\n    string b = \"two\";\n    swap(a, b);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String a = \"one\";\n        String b = \"two\";\n        String temp = a;\n        a = b;\n        b = temp;\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"word\";\n    reverse(s.begin(), s.end());\n    return 0;\n}", "output": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"word\";\n        s = new StringBuilder(s).reverse().toString();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"split,by,comma\";\n    vector<string> parts;\n    size_t pos = 0;\n    while ((pos = s.find(\",\")) != string::npos) {\n        parts.push_back(s.substr(0, pos));\n        s.erase(0, pos + 1);\n    }\n    parts.push_back(s);\n    return 0;\n}", "output": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"split,by,comma\";\n        String[] parts = s.split(\",\");\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Case\";\n    for (char& c : s) c = tolower(c);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"Case\";\n        s = s.toLowerCase();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s1 = \"abc\";\n    string s2 = \"def\";\n    string s3 = s1 + s2;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s1 = \"abc\";\n        String s2 = \"def\";\n        String s3 = s1 + s2;\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"123\";\n    int n = stoi(s);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"123\";\n        int n = Integer.parseInt(s);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    int n = 456;\n    string s = to_string(n);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int n = 456;\n        String s = Integer.toString(n);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Test\";\n    bool isEmpty = s.empty();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"Test\";\n        boolean isEmpty = s.isEmpty();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Example\";\n    s.insert(3, \"+++\"\n    );\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        StringBuilder s = new StringBuilder(\"Example\");\n        s.insert(3, \"+++\");\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"deleteThis\";\n    s.erase(0, 6);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        StringBuilder s = new StringBuilder(\"deleteThis\");\n        s.delete(0, 6);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"text\";\n    reverse(s.begin(), s.end());\n    return 0;\n}", "output": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        StringBuilder s = new StringBuilder(\"text\");\n        s.reverse();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"CamelCase\";\n    for (char& c : s) c = toupper(c);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"CamelCase\";\n        s = s.toUpperCase();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s1 = \"abc\";\n    string s2 = \"abc\";\n    bool eq = (s1 == s2);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        boolean eq = s1.equals(s2);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"token1 token2 token3\";\n    istringstream iss(s);\n    string word;\n    while (iss >> word) {}\n    return 0;\n}", "output": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"token1 token2 token3\";\n        Scanner scanner = new Scanner(s);\n        while (scanner.hasNext()) {\n            String word = scanner.next();\n        }\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"  trimmed  \";\n    size_t start = s.find_first_not_of(' ');\n    size_t end = s.find_last_not_of(' ');\n    string trimmed = s.substr(start, end - start + 1);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"  trimmed  \";\n        String trimmed = s.trim();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Hello World\";\n    size_t pos = s.find(\"World\");\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"Hello World\";\n        int pos = s.indexOf(\"World\");\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"banana\";\n    size_t count = count(s.begin(), s.end(), 'a');\n    return 0;\n}", "output": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"banana\";\n        long count = s.chars().filter(ch -> ch == 'a').count();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"abc\";\n    s.append(\"def\");\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        StringBuilder s = new StringBuilder(\"abc\");\n        s.append(\"def\");\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Case\";\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"Case\";\n        s = s.toLowerCase();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"abcabc\";\n    s.replace(3, 3, \"XYZ\");\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        StringBuilder s = new StringBuilder(\"abcabc\");\n        s.replace(3, 6, \"XYZ\");\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Hello\";\n    char c = s.at(1);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"Hello\";\n        char c = s.charAt(1);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"Hello\";\n    int len = s.length();\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"Hello\";\n        int len = s.length();\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"C++ is fun\";\n    s = s.substr(4);\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String s = \"C++ is fun\";\n        s = s.substring(4);\n    }\n}"}
{"input": "#include <string>\nusing namespace std;\nint main() {\n    string s = \"abcdefg\";\n    reverse(s.begin() + 2, s.begin() + 5);\n    return 0;\n}", "output": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        StringBuilder s = new StringBuilder(\"abcdefg\");\n        String mid = new StringBuilder(s.substring(2, 5)).reverse().toString();\n        s.replace(2, 5, mid);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    time_t today_time = chrono::system_clock::to_time_t(today);\n    return 0;\n}", "output": "import java.time.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto now = chrono::system_clock::now();\n    auto duration = chrono::duration_cast<chrono::hours>(now.time_since_epoch());\n    return 0;\n}", "output": "import java.time.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Instant now = Instant.now();\n        long duration = now.getEpochSecond() / 3600;\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\n#include <iomanip>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    time_t today_time = chrono::system_clock::to_time_t(today);\n    cout << put_time(localtime(&today_time), \"%Y-%m-%d %H:%M:%S\") << endl;\n    return 0;\n}", "output": "import java.time.*;\nimport java.time.format.DateTimeFormatter;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDateTime now = LocalDateTime.now();\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        System.out.println(now.format(formatter));\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto tomorrow = today + chrono::days(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate tomorrow = today.plusDays(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto yesterday = today - chrono::days(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate yesterday = today.minusDays(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto year = chrono::year(2023);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate year = LocalDate.of(2023, 1, 1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto next_month = today + chrono::months(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextMonth = today.plusMonths(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto tomorrow = today + chrono::days(1);\n    chrono::duration<int> diff = chrono::duration_cast<chrono::days>(tomorrow - today);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate tomorrow = today.plusDays(1);\n        long diff = java.time.temporal.ChronoUnit.DAYS.between(today, tomorrow);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto next_month = today + chrono::months(1);\n    cout << chrono::duration_cast<chrono::days>(next_month - today).count() << \" days\" << endl;\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextMonth = today.plusMonths(1);\n        System.out.println(java.time.temporal.ChronoUnit.DAYS.between(today, nextMonth) + \" days\");\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto future = today + chrono::minutes(10);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDateTime today = LocalDateTime.now();\n        LocalDateTime future = today.plusMinutes(10);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto now = chrono::system_clock::now();\n    auto end_of_day = chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(now) / 86400 * 86400 + 86400 - 1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDateTime now = LocalDateTime.now();\n        LocalDateTime endOfDay = now.with(LocalTime.MAX);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto one_week_later = today + chrono::weeks(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate oneWeekLater = today.plusWeeks(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto last_month = today - chrono::months(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate lastMonth = today.minusMonths(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto start_of_year = chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(today) / 31557600 * 31557600);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate startOfYear = today.withDayOfYear(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto next_year = today + chrono::years(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextYear = today.plusYears(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto end_of_week = today + chrono::days(7 - chrono::duration_cast<chrono::days>(today.time_since_epoch()).count() % 7);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate endOfWeek = today.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto start_of_week = today - chrono::days(chrono::duration_cast<chrono::days>(today.time_since_epoch()).count() % 7);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate startOfWeek = today.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto date_in_3_days = today + chrono::days(3);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate dateIn3Days = today.plusDays(3);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto start_of_month = chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(today) / 2592000 * 2592000);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate startOfMonth = today.withDayOfMonth(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto beginning_of_year = chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(today) / 31557600 * 31557600);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate beginningOfYear = today.withDayOfYear(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto now = chrono::system_clock::now();\n    auto previous_month = now - chrono::months(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDateTime now = LocalDateTime.now();\n        LocalDateTime previousMonth = now.minusMonths(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto now = chrono::system_clock::now();\n    auto end_of_year = chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(now) / 31557600 * 31557600 + 31557600 - 1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate now = LocalDate.now();\n        LocalDate endOfYear = now.withMonth(12).withDayOfMonth(31);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto now = chrono::system_clock::now();\n    auto previous_year = now - chrono::years(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDateTime now = LocalDateTime.now();\n        LocalDateTime previousYear = now.minusYears(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto first_half_of_year = today < chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(today) / 31557600 * 31557600 + 15811200) ? true : false;\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        boolean firstHalfOfYear = today.isBefore(LocalDate.of(today.getYear(), 6, 30));\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto next_quarter = today + chrono::months(3);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextQuarter = today.plusMonths(3);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto start_of_next_month = chrono::system_clock::from_time_t(chrono::system_clock::to_time_t(today) / 2592000 * 2592000 + 2592000);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate startOfNextMonth = today.plusMonths(1).withDayOfMonth(1);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto date_in_30_days = today + chrono::days(30);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate dateIn30Days = today.plusDays(30);\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto first_day_of_next_week = today + chrono::days(7 - chrono::duration_cast<chrono::days>(today.time_since_epoch()).count() % 7);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate firstDayOfNextWeek = today.plusDays(7 - today.getDayOfWeek().getValue());\n    }\n}"}
{"input": "#include <iostream>\n#include <chrono>\nusing namespace std;\nint main() {\n    auto today = chrono::system_clock::now();\n    auto next_month = today + chrono::months(1);\n    return 0;\n}", "output": "import java.time.*;\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextMonth = today.plusMonths(1);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IShape {\npublic:\n    virtual void draw() = 0;\n};\nclass Circle : public IShape {\npublic:\n    void draw() override {\n        cout << \"Drawing Circle\" << endl;\n    }\n};\nint main() {\n    Circle c;\n    c.draw();\n    return 0;\n}", "output": "interface IShape {\n    void draw();\n}\nclass Circle implements IShape {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing Circle\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IShape c = new Circle();\n        c.draw();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IPlayable {\npublic:\n    virtual void play() = 0;\n};\nclass Song : public IPlayable {\npublic:\n    void play() override {\n        cout << \"Playing Song\" << endl;\n    }\n};\nint main() {\n    Song s;\n    s.play();\n    return 0;\n}", "output": "interface IPlayable {\n    void play();\n}\nclass Song implements IPlayable {\n    @Override\n    public void play() {\n        System.out.println(\"Playing Song\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IPlayable s = new Song();\n        s.play();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IVehicle {\npublic:\n    virtual void start() = 0;\n};\nclass Car : public IVehicle {\npublic:\n    void start() override {\n        cout << \"Car is starting\" << endl;\n    }\n};\nint main() {\n    Car c;\n    c.start();\n    return 0;\n}", "output": "interface IVehicle {\n    void start();\n}\nclass Car implements IVehicle {\n    @Override\n    public void start() {\n        System.out.println(\"Car is starting\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IVehicle c = new Car();\n        c.start();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IShape {\npublic:\n    virtual void calculateArea() = 0;\n};\nclass Rectangle : public IShape {\npublic:\n    void calculateArea() override {\n        cout << \"Calculating Rectangle Area\" << endl;\n    }\n};\nint main() {\n    Rectangle r;\n    r.calculateArea();\n    return 0;\n}", "output": "interface IShape {\n    void calculateArea();\n}\nclass Rectangle implements IShape {\n    @Override\n    public void calculateArea() {\n        System.out.println(\"Calculating Rectangle Area\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IShape r = new Rectangle();\n        r.calculateArea();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IStorage {\npublic:\n    virtual void storeData() = 0;\n};\nclass Database : public IStorage {\npublic:\n    void storeData() override {\n        cout << \"Storing data in Database\" << endl;\n    }\n};\nint main() {\n    Database db;\n    db.storeData();\n    return 0;\n}", "output": "interface IStorage {\n    void storeData();\n}\nclass Database implements IStorage {\n    @Override\n    public void storeData() {\n        System.out.println(\"Storing data in Database\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IStorage db = new Database();\n        db.storeData();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IDriveable {\npublic:\n    virtual void drive() = 0;\n};\nclass Bike : public IDriveable {\npublic:\n    void drive() override {\n        cout << \"Driving Bike\" << endl;\n    }\n};\nint main() {\n    Bike b;\n    b.drive();\n    return 0;\n}", "output": "interface IDriveable {\n    void drive();\n}\nclass Bike implements IDriveable {\n    @Override\n    public void drive() {\n        System.out.println(\"Driving Bike\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IDriveable b = new Bike();\n        b.drive();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IMovable {\npublic:\n    virtual void move() = 0;\n};\nclass Robot : public IMovable {\npublic:\n    void move() override {\n        cout << \"Moving Robot\" << endl;\n    }\n};\nint main() {\n    Robot r;\n    r.move();\n    return 0;\n}", "output": "interface IMovable {\n    void move();\n}\nclass Robot implements IMovable {\n    @Override\n    public void move() {\n        System.out.println(\"Moving Robot\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IMovable r = new Robot();\n        r.move();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass IPayable {\npublic:\n    virtual void pay() = 0;\n};\nclass Employee : public IPayable {\npublic:\n    void pay() override {\n        cout << \"Paying Employee\" << endl;\n    }\n};\nint main() {\n    Employee e;\n    e.pay();\n    return 0;\n}", "output": "interface IPayable {\n    void pay();\n}\nclass Employee implements IPayable {\n    @Override\n    public void pay() {\n        System.out.println(\"Paying Employee\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        IPayable e = new Employee();\n        e.pay();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\nclass ITransportable {\npublic:\n    virtual void transport() = 0;\n};\nclass Truck : public ITransportable {\npublic:\n    void transport() override {\n        cout << \"Transporting goods by Truck\" << endl;\n    }\n};\nint main() {\n    Truck t;\n    t.transport();\n    return 0;\n}", "output": "interface ITransportable {\n    void transport();\n}\nclass Truck implements ITransportable {\n    @Override\n    public void transport() {\n        System.out.println(\"Transporting goods by Truck\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        ITransportable t = new Truck();\n        t.transport();\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    virtual void drive() = 0;\n};\n\nclass Car : public Vehicle {\npublic:\n    void drive() override {\n        std::cout << \"Driving a car\" << std::endl;\n    }\n};\n\nint main() {\n    Car car;\n    car.drive();\n    return 0;\n}", "output": "interface Vehicle {\n    void drive();\n}\n\nclass Car implements Vehicle {\n    public void drive() {\n        System.out.println(\"Driving a car\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.drive();\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    virtual void drive() = 0;\n};\n\nclass Car : public Vehicle {\npublic:\n    void drive() override {\n        std::cout << \"Driving a car\" << std::endl;\n    }\n};\n\nint main() {\n    Car car;\n    car.drive();\n    return 0;\n}", "output": "interface Vehicle {\n    void drive();\n}\n\nclass Car implements Vehicle {\n    public void drive() {\n        System.out.println(\"Driving a car\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.drive();\n    }\n}"}
{"input": "class Employee {\npublic:\n    virtual void work() = 0;\n};\n\nclass Manager : public Employee {\npublic:\n    void work() override {\n        std::cout << \"Managing the team\" << std::endl;\n    }\n};\n\nint main() {\n    Manager manager;\n    manager.work();\n    return 0;\n}", "output": "interface Employee {\n    void work();\n}\n\nclass Manager implements Employee {\n    public void work() {\n        System.out.println(\"Managing the team\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Manager manager = new Manager();\n        manager.work();\n    }\n}"}
{"input": "class Robot {\npublic:\n    virtual void performTask() = 0;\n};\n\nclass CleaningRobot : public Robot {\npublic:\n    void performTask() override {\n        std::cout << \"Cleaning the floor\" << std::endl;\n    }\n};\n\nint main() {\n    CleaningRobot robot;\n    robot.performTask();\n    return 0;\n}", "output": "interface Robot {\n    void performTask();\n}\n\nclass CleaningRobot implements Robot {\n    public void performTask() {\n        System.out.println(\"Cleaning the floor\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CleaningRobot robot = new CleaningRobot();\n        robot.performTask();\n    }\n}"}
{"input": "class Shape {\npublic:\n    virtual void draw() = 0;\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() override {\n        std::cout << \"Drawing a circle\" << std::endl;\n    }\n};\n\nint main() {\n    Circle circle;\n    circle.draw();\n    return 0;\n}", "output": "interface Shape {\n    void draw();\n}\n\nclass Circle implements Shape {\n    public void draw() {\n        System.out.println(\"Drawing a circle\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle circle = new Circle();\n        circle.draw();\n    }\n}"}
{"input": "class Animal {\npublic:\n    virtual void makeSound() = 0;\n};\n\nclass Dog : public Animal {\npublic:\n    void makeSound() override {\n        std::cout << \"Bark\" << std::endl;\n    }\n};\n\nint main() {\n    Dog dog;\n    dog.makeSound();\n    return 0;\n}", "output": "interface Animal {\n    void makeSound();\n}\n\nclass Dog implements Animal {\n    public void makeSound() {\n        System.out.println(\"Bark\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.makeSound();\n    }\n}"}
{"input": "class Person {\npublic:\n    virtual void greet() = 0;\n};\n\nclass Student : public Person {\npublic:\n    void greet() override {\n        std::cout << \"Hello, I'm a student!\" << std::endl;\n    }\n};\n\nint main() {\n    Student student;\n    student.greet();\n    return 0;\n}", "output": "interface Person {\n    void greet();\n}\n\nclass Student implements Person {\n    public void greet() {\n        System.out.println(\"Hello, I'm a student!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student();\n        student.greet();\n    }\n}"}
{"input": "class BankAccount {\npublic:\n    virtual void deposit(double amount) = 0;\n};\n\nclass SavingsAccount : public BankAccount {\npublic:\n    void deposit(double amount) override {\n        std::cout << \"Depositing to savings account\" << std::endl;\n    }\n};\n\nint main() {\n    SavingsAccount account;\n    account.deposit(1000);\n    return 0;\n}", "output": "interface BankAccount {\n    void deposit(double amount);\n}\n\nclass SavingsAccount implements BankAccount {\n    public void deposit(double amount) {\n        System.out.println(\"Depositing to savings account\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        SavingsAccount account = new SavingsAccount();\n        account.deposit(1000);\n    }\n}"}
{"input": "class Database {\npublic:\n    virtual void connect() = 0;\n};\n\nclass MySQL : public Database {\npublic:\n    void connect() override {\n        std::cout << \"Connecting to MySQL database\" << std::endl;\n    }\n};\n\nint main() {\n    MySQL db;\n    db.connect();\n    return 0;\n}", "output": "interface Database {\n    void connect();\n}\n\nclass MySQL implements Database {\n    public void connect() {\n        System.out.println(\"Connecting to MySQL database\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MySQL db = new MySQL();\n        db.connect();\n    }\n}"}
{"input": "class Printer {\npublic:\n    virtual void print() = 0;\n};\n\nclass InkjetPrinter : public Printer {\npublic:\n    void print() override {\n        std::cout << \"Printing on inkjet printer\" << std::endl;\n    }\n};\n\nint main() {\n    InkjetPrinter printer;\n    printer.print();\n    return 0;\n}", "output": "interface Printer {\n    void print();\n}\n\nclass InkjetPrinter implements Printer {\n    public void print() {\n        System.out.println(\"Printing on inkjet printer\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        InkjetPrinter printer = new InkjetPrinter();\n        printer.print();\n    }\n}"}
{"input": "class Appliance {\npublic:\n    virtual void operate() = 0;\n};\n\nclass WashingMachine : public Appliance {\npublic:\n    void operate() override {\n        std::cout << \"Washing clothes\" << std::endl;\n    }\n};\n\nint main() {\n    WashingMachine washer;\n    washer.operate();\n    return 0;\n}", "output": "interface Appliance {\n    void operate();\n}\n\nclass WashingMachine implements Appliance {\n    public void operate() {\n        System.out.println(\"Washing clothes\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        WashingMachine washer = new WashingMachine();\n        washer.operate();\n    }\n}"}
{"input": "class FileOperations {\npublic:\n    virtual void openFile(const std::string& filename) = 0;\n};\n\nclass TextFile : public FileOperations {\npublic:\n    void openFile(const std::string& filename) override {\n        std::cout << \"Opening text file: \" << filename << std::endl;\n    }\n};\n\nint main() {\n    TextFile file;\n    file.openFile(\"example.txt\");\n    return 0;\n}", "output": "interface FileOperations {\n    void openFile(String filename);\n}\n\nclass TextFile implements FileOperations {\n    public void openFile(String filename) {\n        System.out.println(\"Opening text file: \" + filename);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        TextFile file = new TextFile();\n        file.openFile(\"example.txt\");\n    }\n}"}
{"input": "class Light {\npublic:\n    virtual void turnOn() = 0;\n};\n\nclass LEDLight : public Light {\npublic:\n    void turnOn() override {\n        std::cout << \"LED light is on\" << std::endl;\n    }\n};\n\nint main() {\n    LEDLight led;\n    led.turnOn();\n    return 0;\n}", "output": "interface Light {\n    void turnOn();\n}\n\nclass LEDLight implements Light {\n    public void turnOn() {\n        System.out.println(\"LED light is on\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LEDLight led = new LEDLight();\n        led.turnOn();\n    }\n}"}
{"input": "class Animal {\npublic:\n    virtual void sound() = 0;\n};\n\nclass Cat : public Animal {\npublic:\n    void sound() override {\n        std::cout << \"Meow\" << std::endl;\n    }\n};\n\nint main() {\n    Cat cat;\n    cat.sound();\n    return 0;\n}", "output": "interface Animal {\n    void sound();\n}\n\nclass Cat implements Animal {\n    public void sound() {\n        System.out.println(\"Meow\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Cat cat = new Cat();\n        cat.sound();\n    }\n}"}
{"input": "class Car {\npublic:\n    virtual void drive() = 0;\n};\n\nclass ElectricCar : public Car {\npublic:\n    void drive() override {\n        std::cout << \"Driving an electric car\" << std::endl;\n    }\n};\n\nint main() {\n    ElectricCar car;\n    car.drive();\n    return 0;\n}", "output": "interface Car {\n    void drive();\n}\n\nclass ElectricCar implements Car {\n    public void drive() {\n        System.out.println(\"Driving an electric car\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ElectricCar car = new ElectricCar();\n        car.drive();\n    }\n}"}
{"input": "class Shape {\npublic:\n    virtual void draw() = 0;\n};\n\nclass Square : public Shape {\npublic:\n    void draw() override {\n        std::cout << \"Drawing a square\" << std::endl;\n    }\n};\n\nint main() {\n    Square square;\n    square.draw();\n    return 0;\n}", "output": "interface Shape {\n    void draw();\n}\n\nclass Square implements Shape {\n    public void draw() {\n        System.out.println(\"Drawing a square\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Square square = new Square();\n        square.draw();\n    }\n}"}
{"input": "class Device {\npublic:\n    virtual void powerOn() = 0;\n};\n\nclass Laptop : public Device {\npublic:\n    void powerOn() override {\n        std::cout << \"Powering on the laptop\" << std::endl;\n    }\n};\n\nint main() {\n    Laptop laptop;\n    laptop.powerOn();\n    return 0;\n}", "output": "interface Device {\n    void powerOn();\n}\n\nclass Laptop implements Device {\n    public void powerOn() {\n        System.out.println(\"Powering on the laptop\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Laptop laptop = new Laptop();\n        laptop.powerOn();\n    }\n}"}
{"input": "class MusicPlayer {\npublic:\n    virtual void playMusic() = 0;\n};\n\nclass Spotify : public MusicPlayer {\npublic:\n    void playMusic() override {\n        std::cout << \"Playing music on Spotify\" << std::endl;\n    }\n};\n\nint main() {\n    Spotify spotify;\n    spotify.playMusic();\n    return 0;\n}", "output": "interface MusicPlayer {\n    void playMusic();\n}\n\nclass Spotify implements MusicPlayer {\n    public void playMusic() {\n        System.out.println(\"Playing music on Spotify\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Spotify spotify = new Spotify();\n        spotify.playMusic();\n    }\n}"}
{"input": "class Worker {\npublic:\n    virtual void work() = 0;\n};\n\nclass Engineer : public Worker {\npublic:\n    void work() override {\n        std::cout << \"Engineering work\" << std::endl;\n    }\n};\n\nint main() {\n    Engineer engineer;\n    engineer.work();\n    return 0;\n}", "output": "interface Worker {\n    void work();\n}\n\nclass Engineer implements Worker {\n    public void work() {\n        System.out.println(\"Engineering work\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Engineer engineer = new Engineer();\n        engineer.work();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void eat() {\n        std::cout << \"Eating\" << std::endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void bark() {\n        std::cout << \"Barking\" << std::endl;\n    }\n};\n\nint main() {\n    Dog dog;\n    dog.eat();\n    dog.bark();\n    return 0;\n}", "output": "class Animal {\n    public void eat() {\n        System.out.println(\"Eating\");\n    }\n}\n\nclass Dog extends Animal {\n    public void bark() {\n        System.out.println(\"Barking\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat();\n        dog.bark();\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    void drive() {\n        std::cout << \"Driving\" << std::endl;\n    }\n};\n\nclass Car : public Vehicle {\npublic:\n    void honk() {\n        std::cout << \"Honking\" << std::endl;\n    }\n};\n\nint main() {\n    Car car;\n    car.drive();\n    car.honk();\n    return 0;\n}", "output": "class Vehicle {\n    public void drive() {\n        System.out.println(\"Driving\");\n    }\n}\n\nclass Car extends Vehicle {\n    public void honk() {\n        System.out.println(\"Honking\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.drive();\n        car.honk();\n    }\n}"}
{"input": "class Person {\npublic:\n    void speak() {\n        std::cout << \"Speaking\" << std::endl;\n    }\n};\n\nclass Teacher : public Person {\npublic:\n    void teach() {\n        std::cout << \"Teaching\" << std::endl;\n    }\n};\n\nint main() {\n    Teacher teacher;\n    teacher.speak();\n    teacher.teach();\n    return 0;\n}", "output": "class Person {\n    public void speak() {\n        System.out.println(\"Speaking\");\n    }\n}\n\nclass Teacher extends Person {\n    public void teach() {\n        System.out.println(\"Teaching\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Teacher teacher = new Teacher();\n        teacher.speak();\n        teacher.teach();\n    }\n}"}
{"input": "class Shape {\npublic:\n    virtual void draw() {\n        std::cout << \"Drawing shape\" << std::endl;\n    }\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() override {\n        std::cout << \"Drawing circle\" << std::endl;\n    }\n};\n\nint main() {\n    Circle circle;\n    circle.draw();\n    return 0;\n}", "output": "class Shape {\n    public void draw() {\n        System.out.println(\"Drawing shape\");\n    }\n}\n\nclass Circle extends Shape {\n    public void draw() {\n        System.out.println(\"Drawing circle\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle circle = new Circle();\n        circle.draw();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void sleep() {\n        std::cout << \"Sleeping\" << std::endl;\n    }\n};\n\nclass Cat : public Animal {\npublic:\n    void purr() {\n        std::cout << \"Purring\" << std::endl;\n    }\n};\n\nint main() {\n    Cat cat;\n    cat.sleep();\n    cat.purr();\n    return 0;\n}", "output": "class Animal {\n    public void sleep() {\n        System.out.println(\"Sleeping\");\n    }\n}\n\nclass Cat extends Animal {\n    public void purr() {\n        System.out.println(\"Purring\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Cat cat = new Cat();\n        cat.sleep();\n        cat.purr();\n    }\n}"}
{"input": "class Machine {\npublic:\n    void start() {\n        std::cout << \"Machine started\" << std::endl;\n    }\n};\n\nclass WashingMachine : public Machine {\npublic:\n    void wash() {\n        std::cout << \"Washing clothes\" << std::endl;\n    }\n};\n\nint main() {\n    WashingMachine wm;\n    wm.start();\n    wm.wash();\n    return 0;\n}", "output": "class Machine {\n    public void start() {\n        System.out.println(\"Machine started\");\n    }\n}\n\nclass WashingMachine extends Machine {\n    public void wash() {\n        System.out.println(\"Washing clothes\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        WashingMachine wm = new WashingMachine();\n        wm.start();\n        wm.wash();\n    }\n}"}
{"input": "class Employee {\npublic:\n    void work() {\n        std::cout << \"Working\" << std::endl;\n    }\n};\n\nclass Manager : public Employee {\npublic:\n    void manage() {\n        std::cout << \"Managing\" << std::endl;\n    }\n};\n\nint main() {\n    Manager manager;\n    manager.work();\n    manager.manage();\n    return 0;\n}", "output": "class Employee {\n    public void work() {\n        System.out.println(\"Working\");\n    }\n}\n\nclass Manager extends Employee {\n    public void manage() {\n        System.out.println(\"Managing\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Manager manager = new Manager();\n        manager.work();\n        manager.manage();\n    }\n}"}
{"input": "class Shape {\npublic:\n    virtual void area() {\n        std::cout << \"Calculating area\" << std::endl;\n    }\n};\n\nclass Square : public Shape {\npublic:\n    void area() override {\n        std::cout << \"Calculating area of square\" << std::endl;\n    }\n};\n\nint main() {\n    Square square;\n    square.area();\n    return 0;\n}", "output": "class Shape {\n    public void area() {\n        System.out.println(\"Calculating area\");\n    }\n}\n\nclass Square extends Shape {\n    public void area() {\n        System.out.println(\"Calculating area of square\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Square square = new Square();\n        square.area();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void sound() {\n        std::cout << \"Making sound\" << std::endl;\n    }\n};\n\nclass Bird : public Animal {\npublic:\n    void fly() {\n        std::cout << \"Flying\" << std::endl;\n    }\n};\n\nint main() {\n    Bird bird;\n    bird.sound();\n    bird.fly();\n    return 0;\n}", "output": "class Animal {\n    public void sound() {\n        System.out.println(\"Making sound\");\n    }\n}\n\nclass Bird extends Animal {\n    public void fly() {\n        System.out.println(\"Flying\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        bird.sound();\n        bird.fly();\n    }\n}"}
{"input": "class Computer {\npublic:\n    void turnOn() {\n        std::cout << \"Computer is on\" << std::endl;\n    }\n};\n\nclass Desktop : public Computer {\npublic:\n    void connectKeyboard() {\n        std::cout << \"Keyboard connected\" << std::endl;\n    }\n};\n\nint main() {\n    Desktop desktop;\n    desktop.turnOn();\n    desktop.connectKeyboard();\n    return 0;\n}", "output": "class Computer {\n    public void turnOn() {\n        System.out.println(\"Computer is on\");\n    }\n}\n\nclass Desktop extends Computer {\n    public void connectKeyboard() {\n        System.out.println(\"Keyboard connected\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Desktop desktop = new Desktop();\n        desktop.turnOn();\n        desktop.connectKeyboard();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void eat() {\n        std::cout << \"Eating\" << std::endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void bark() {\n        std::cout << \"Barking\" << std::endl;\n    }\n};\n\nint main() {\n    Dog dog;\n    dog.eat();\n    dog.bark();\n    return 0;\n}", "output": "class Animal {\n    public void eat() {\n        System.out.println(\"Eating\");\n    }\n}\n\nclass Dog extends Animal {\n    public void bark() {\n        System.out.println(\"Barking\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat();\n        dog.bark();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void speak() {\n        std::cout << \"Animal speaking\" << std::endl;\n    }\n};\n\nclass Cat : public Animal {\npublic:\n    void speak() {\n        std::cout << \"Meow\" << std::endl;\n    }\n};\n\nint main() {\n    Cat cat;\n    cat.speak();\n    return 0;\n}", "output": "class Animal {\n    public void speak() {\n        System.out.println(\"Animal speaking\");\n    }\n}\n\nclass Cat extends Animal {\n    public void speak() {\n        System.out.println(\"Meow\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Cat cat = new Cat();\n        cat.speak();\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    void start() {\n        std::cout << \"Starting vehicle\" << std::endl;\n    }\n};\n\nclass Car : public Vehicle {\npublic:\n    void accelerate() {\n        std::cout << \"Accelerating car\" << std::endl;\n    }\n};\n\nint main() {\n    Car car;\n    car.start();\n    car.accelerate();\n    return 0;\n}", "output": "class Vehicle {\n    public void start() {\n        System.out.println(\"Starting vehicle\");\n    }\n}\n\nclass Car extends Vehicle {\n    public void accelerate() {\n        System.out.println(\"Accelerating car\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.start();\n        car.accelerate();\n    }\n}"}
{"input": "class Shape {\npublic:\n    virtual void draw() {\n        std::cout << \"Drawing shape\" << std::endl;\n    }\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() override {\n        std::cout << \"Drawing circle\" << std::endl;\n    }\n};\n\nint main() {\n    Circle circle;\n    circle.draw();\n    return 0;\n}", "output": "class Shape {\n    public void draw() {\n        System.out.println(\"Drawing shape\");\n    }\n}\n\nclass Circle extends Shape {\n    public void draw() {\n        System.out.println(\"Drawing circle\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle circle = new Circle();\n        circle.draw();\n    }\n}"}
{"input": "class Machine {\npublic:\n    void operate() {\n        std::cout << \"Machine operating\" << std::endl;\n    }\n};\n\nclass WashingMachine : public Machine {\npublic:\n    void wash() {\n        std::cout << \"Washing clothes\" << std::endl;\n    }\n};\n\nint main() {\n    WashingMachine wm;\n    wm.operate();\n    wm.wash();\n    return 0;\n}", "output": "class Machine {\n    public void operate() {\n        System.out.println(\"Machine operating\");\n    }\n}\n\nclass WashingMachine extends Machine {\n    public void wash() {\n        System.out.println(\"Washing clothes\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        WashingMachine wm = new WashingMachine();\n        wm.operate();\n        wm.wash();\n    }\n}"}
{"input": "class Account {\npublic:\n    void deposit() {\n        std::cout << \"Depositing money\" << std::endl;\n    }\n};\n\nclass SavingsAccount : public Account {\npublic:\n    void calculateInterest() {\n        std::cout << \"Calculating interest\" << std::endl;\n    }\n};\n\nint main() {\n    SavingsAccount sa;\n    sa.deposit();\n    sa.calculateInterest();\n    return 0;\n}", "output": "class Account {\n    public void deposit() {\n        System.out.println(\"Depositing money\");\n    }\n}\n\nclass SavingsAccount extends Account {\n    public void calculateInterest() {\n        System.out.println(\"Calculating interest\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        SavingsAccount sa = new SavingsAccount();\n        sa.deposit();\n        sa.calculateInterest();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void move() {\n        std::cout << \"Moving\" << std::endl;\n    }\n};\n\nclass Bird : public Animal {\npublic:\n    void fly() {\n        std::cout << \"Flying\" << std::endl;\n    }\n};\n\nint main() {\n    Bird bird;\n    bird.move();\n    bird.fly();\n    return 0;\n}", "output": "class Animal {\n    public void move() {\n        System.out.println(\"Moving\");\n    }\n}\n\nclass Bird extends Animal {\n    public void fly() {\n        System.out.println(\"Flying\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        bird.move();\n        bird.fly();\n    }\n}"}
{"input": "class Shape {\npublic:\n    void area() {\n        std::cout << \"Calculating area\" << std::endl;\n    }\n};\n\nclass Rectangle : public Shape {\npublic:\n    void area() {\n        std::cout << \"Calculating area of rectangle\" << std::endl;\n    }\n};\n\nint main() {\n    Rectangle rectangle;\n    rectangle.area();\n    return 0;\n}", "output": "class Shape {\n    public void area() {\n        System.out.println(\"Calculating area\");\n    }\n}\n\nclass Rectangle extends Shape {\n    public void area() {\n        System.out.println(\"Calculating area of rectangle\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Rectangle rectangle = new Rectangle();\n        rectangle.area();\n    }\n}"}
{"input": "class Worker {\npublic:\n    void work() {\n        std::cout << \"Working\" << std::endl;\n    }\n};\n\nclass Engineer : public Worker {\npublic:\n    void design() {\n        std::cout << \"Designing\" << std::endl;\n    }\n};\n\nint main() {\n    Engineer engineer;\n    engineer.work();\n    engineer.design();\n    return 0;\n}", "output": "class Worker {\n    public void work() {\n        System.out.println(\"Working\");\n    }\n}\n\nclass Engineer extends Worker {\n    public void design() {\n        System.out.println(\"Designing\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Engineer engineer = new Engineer();\n        engineer.work();\n        engineer.design();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void eat() {\n        std::cout << \"Eating\" << std::endl;\n    }\n};\n\nclass Flyable {\npublic:\n    void fly() {\n        std::cout << \"Flying\" << std::endl;\n    }\n};\n\nclass Bird : public Animal, public Flyable {\n};\n\nint main() {\n    Bird bird;\n    bird.eat();\n    bird.fly();\n    return 0;\n}", "output": "class Animal {\n    public void eat() {\n        System.out.println(\"Eating\");\n    }\n}\n\nclass Flyable {\n    public void fly() {\n        System.out.println(\"Flying\");\n    }\n}\n\nclass Bird extends Animal, Flyable {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        bird.eat();\n        bird.fly();\n    }\n}"}
{"input": "class A {\npublic:\n    void printA() {\n        std::cout << \"Class A\" << std::endl;\n    }\n};\n\nclass B {\npublic:\n    void printB() {\n        std::cout << \"Class B\" << std::endl;\n    }\n};\n\nclass C : public A, public B {\n};\n\nint main() {\n    C c;\n    c.printA();\n    c.printB();\n    return 0;\n}", "output": "class A {\n    public void printA() {\n        System.out.println(\"Class A\");\n    }\n}\n\nclass B {\n    public void printB() {\n        System.out.println(\"Class B\");\n    }\n}\n\nclass C extends A, B {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        C c = new C();\n        c.printA();\n        c.printB();\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    void start() {\n        std::cout << \"Starting vehicle\" << std::endl;\n    }\n};\n\nclass Engine {\npublic:\n    void run() {\n        std::cout << \"Running engine\" << std::endl;\n    }\n};\n\nclass Car : public Vehicle, public Engine {\n};\n\nint main() {\n    Car car;\n    car.start();\n    car.run();\n    return 0;\n}", "output": "class Vehicle {\n    public void start() {\n        System.out.println(\"Starting vehicle\");\n    }\n}\n\nclass Engine {\n    public void run() {\n        System.out.println(\"Running engine\");\n    }\n}\n\nclass Car extends Vehicle, Engine {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.start();\n        car.run();\n    }\n}"}
{"input": "class Printer {\npublic:\n    void print() {\n        std::cout << \"Printing\" << std::endl;\n    }\n};\n\nclass Scanner {\npublic:\n    void scan() {\n        std::cout << \"Scanning\" << std::endl;\n    }\n};\n\nclass MultiFunction : public Printer, public Scanner {\n};\n\nint main() {\n    MultiFunction mf;\n    mf.print();\n    mf.scan();\n    return 0;\n}", "output": "class Printer {\n    public void print() {\n        System.out.println(\"Printing\");\n    }\n}\n\nclass Scanner {\n    public void scan() {\n        System.out.println(\"Scanning\");\n    }\n}\n\nclass MultiFunction extends Printer, Scanner {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MultiFunction mf = new MultiFunction();\n        mf.print();\n        mf.scan();\n    }\n}"}
{"input": "class Shape {\npublic:\n    void draw() {\n        std::cout << \"Drawing shape\" << std::endl;\n    }\n};\n\nclass Colorable {\npublic:\n    void color() {\n        std::cout << \"Coloring shape\" << std::endl;\n    }\n};\n\nclass Rectangle : public Shape, public Colorable {\n};\n\nint main() {\n    Rectangle rect;\n    rect.draw();\n    rect.color();\n    return 0;\n}", "output": "class Shape {\n    public void draw() {\n        System.out.println(\"Drawing shape\");\n    }\n}\n\nclass Colorable {\n    public void color() {\n        System.out.println(\"Coloring shape\");\n    }\n}\n\nclass Rectangle extends Shape, Colorable {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Rectangle rect = new Rectangle();\n        rect.draw();\n        rect.color();\n    }\n}"}
{"input": "class Animal {\npublic:\n    void eat() {\n        std::cout << \"Eating\" << std::endl;\n    }\n};\n\nclass Flyable {\npublic:\n    void fly() {\n        std::cout << \"Flying\" << std::endl;\n    }\n};\n\nclass Swimmable {\npublic:\n    void swim() {\n        std::cout << \"Swimming\" << std::endl;\n    }\n};\n\nclass Duck : public Animal, public Flyable, public Swimmable {\n};\n\nint main() {\n    Duck duck;\n    duck.eat();\n    duck.fly();\n    duck.swim();\n    return 0;\n}", "output": "class Animal {\n    public void eat() {\n        System.out.println(\"Eating\");\n    }\n}\n\nclass Flyable {\n    public void fly() {\n        System.out.println(\"Flying\");\n    }\n}\n\nclass Swimmable {\n    public void swim() {\n        System.out.println(\"Swimming\");\n    }\n}\n\nclass Duck extends Animal, Flyable, Swimmable {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Duck duck = new Duck();\n        duck.eat();\n        duck.fly();\n        duck.swim();\n    }\n}"}
{"input": "class Device {\npublic:\n    void powerOn() {\n        std::cout << \"Powering on device\" << std::endl;\n    }\n};\n\nclass Camera {\npublic:\n    void capture() {\n        std::cout << \"Capturing photo\" << std::endl;\n    }\n};\n\nclass Smartphone : public Device, public Camera {\n};\n\nint main() {\n    Smartphone phone;\n    phone.powerOn();\n    phone.capture();\n    return 0;\n}", "output": "class Device {\n    public void powerOn() {\n        System.out.println(\"Powering on device\");\n    }\n}\n\nclass Camera {\n    public void capture() {\n        System.out.println(\"Capturing photo\");\n    }\n}\n\nclass Smartphone extends Device, Camera {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Smartphone phone = new Smartphone();\n        phone.powerOn();\n        phone.capture();\n    }\n}"}
{"input": "class Base1 {\npublic:\n    void func1() {\n        std::cout << \"Function from Base1\" << std::endl;\n    }\n};\n\nclass Base2 {\npublic:\n    void func2() {\n        std::cout << \"Function from Base2\" << std::endl;\n    }\n};\n\nclass Derived : public Base1, public Base2 {\n};\n\nint main() {\n    Derived d;\n    d.func1();\n    d.func2();\n    return 0;\n}", "output": "class Base1 {\n    public void func1() {\n        System.out.println(\"Function from Base1\");\n    }\n}\n\nclass Base2 {\n    public void func2() {\n        System.out.println(\"Function from Base2\");\n    }\n}\n\nclass Derived extends Base1, Base2 {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Derived d = new Derived();\n        d.func1();\n        d.func2();\n    }\n}"}
{"input": "class Worker {\npublic:\n    void work() {\n        std::cout << \"Working\" << std::endl;\n    }\n};\n\nclass Manager {\npublic:\n    void manage() {\n        std::cout << \"Managing team\" << std::endl;\n    }\n};\n\nclass TeamLead : public Worker, public Manager {\n};\n\nint main() {\n    TeamLead tl;\n    tl.work();\n    tl.manage();\n    return 0;\n}", "output": "class Worker {\n    public void work() {\n        System.out.println(\"Working\");\n    }\n}\n\nclass Manager {\n    public void manage() {\n        System.out.println(\"Managing team\");\n    }\n}\n\nclass TeamLead extends Worker, Manager {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        TeamLead tl = new TeamLead();\n        tl.work();\n        tl.manage();\n    }\n}"}
{"input": "class Appliance {\npublic:\n    void turnOn() {\n        std::cout << \"Appliance is now on\" << std::endl;\n    }\n};\n\nclass Connectable {\npublic:\n    void connect() {\n        std::cout << \"Connecting appliance\" << std::endl;\n    }\n};\n\nclass SmartDevice : public Appliance, public Connectable {\n};\n\nint main() {\n    SmartDevice device;\n    device.turnOn();\n    device.connect();\n    return 0;\n}", "output": "class Appliance {\n    public void turnOn() {\n        System.out.println(\"Appliance is now on\");\n    }\n}\n\nclass Connectable {\n    public void connect() {\n        System.out.println(\"Connecting appliance\");\n    }\n}\n\nclass SmartDevice extends Appliance, Connectable {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        SmartDevice device = new SmartDevice();\n        device.turnOn();\n        device.connect();\n    }\n}"}
{"input": "class Person {\npublic:\n    void introduce() {\n        std::cout << \"Hello, I am a person\" << std::endl;\n    }\n};\n\nclass Worker {\npublic:\n    void work() {\n        std::cout << \"Working\" << std::endl;\n    }\n};\n\nclass Engineer : public Person, public Worker {\n};\n\nint main() {\n    Engineer eng;\n    eng.introduce();\n    eng.work();\n    return 0;\n}", "output": "class Person {\n    public void introduce() {\n        System.out.println(\"Hello, I am a person\");\n    }\n}\n\nclass Worker {\n    public void work() {\n        System.out.println(\"Working\");\n    }\n}\n\nclass Engineer extends Person, Worker {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Engineer eng = new Engineer();\n        eng.introduce();\n        eng.work();\n    }\n}"}
{"input": "class Car {\npublic:\n    void drive() {\n        std::cout << \"Driving car\" << std::endl;\n    }\n};\n\nclass Electric {\npublic:\n    void charge() {\n        std::cout << \"Charging car\" << std::endl;\n    }\n};\n\nclass ElectricCar : public Car, public Electric {\n};\n\nint main() {\n    ElectricCar tesla;\n    tesla.drive();\n    tesla.charge();\n    return 0;\n}", "output": "class Car {\n    public void drive() {\n        System.out.println(\"Driving car\");\n    }\n}\n\nclass Electric {\n    public void charge() {\n        System.out.println(\"Charging car\");\n    }\n}\n\nclass ElectricCar extends Car, Electric {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ElectricCar tesla = new ElectricCar();\n        tesla.drive();\n        tesla.charge();\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    void start() {\n        std::cout << \"Starting vehicle\" << std::endl;\n    }\n};\n\nclass Airborne {\npublic:\n    void fly() {\n        std::cout << \"Flying vehicle\" << std::endl;\n    }\n};\n\nclass Aircraft : public Vehicle, public Airborne {\n};\n\nint main() {\n    Aircraft plane;\n    plane.start();\n    plane.fly();\n    return 0;\n}", "output": "class Vehicle {\n    public void start() {\n        System.out.println(\"Starting vehicle\");\n    }\n}\n\nclass Airborne {\n    public void fly() {\n        System.out.println(\"Flying vehicle\");\n    }\n}\n\nclass Aircraft extends Vehicle, Airborne {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Aircraft plane = new Aircraft();\n        plane.start();\n        plane.fly();\n    }\n}"}
{"input": "class LibraryItem {\npublic:\n    void checkIn() {\n        std::cout << \"Item checked in\" << std::endl;\n    }\n};\n\nclass Book {\npublic:\n    void read() {\n        std::cout << \"Reading book\" << std::endl;\n    }\n};\n\nclass Ebook : public LibraryItem, public Book {\n};\n\nint main() {\n    Ebook ebook;\n    ebook.checkIn();\n    ebook.read();\n    return 0;\n}", "output": "class LibraryItem {\n    public void checkIn() {\n        System.out.println(\"Item checked in\");\n    }\n}\n\nclass Book {\n    public void read() {\n        System.out.println(\"Reading book\");\n    }\n}\n\nclass Ebook extends LibraryItem, Book {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Ebook ebook = new Ebook();\n        ebook.checkIn();\n        ebook.read();\n    }\n}"}
{"input": "class Engine {\npublic:\n    void run() {\n        std::cout << \"Engine running\" << std::endl;\n    }\n};\n\nclass Transmission {\npublic:\n    void shift() {\n        std::cout << \"Shifting gears\" << std::endl;\n    }\n};\n\nclass Car : public Engine, public Transmission {\n};\n\nint main() {\n    Car car;\n    car.run();\n    car.shift();\n    return 0;\n}", "output": "class Engine {\n    public void run() {\n        System.out.println(\"Engine running\");\n    }\n}\n\nclass Transmission {\n    public void shift() {\n        System.out.println(\"Shifting gears\");\n    }\n}\n\nclass Car extends Engine, Transmission {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.run();\n        car.shift();\n    }\n}"}
{"input": "class Mammal {\npublic:\n    void giveBirth() {\n        std::cout << \"Giving birth\" << std::endl;\n    }\n};\n\nclass Swimmer {\npublic:\n    void swim() {\n        std::cout << \"Swimming\" << std::endl;\n    }\n};\n\nclass Dolphin : public Mammal, public Swimmer {\n};\n\nint main() {\n    Dolphin dolphin;\n    dolphin.giveBirth();\n    dolphin.swim();\n    return 0;\n}", "output": "class Mammal {\n    public void giveBirth() {\n        System.out.println(\"Giving birth\");\n    }\n}\n\nclass Swimmer {\n    public void swim() {\n        System.out.println(\"Swimming\");\n    }\n}\n\nclass Dolphin extends Mammal, Swimmer {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dolphin dolphin = new Dolphin();\n        dolphin.giveBirth();\n        dolphin.swim();\n    }\n}"}
{"input": "class SmartPhone {\npublic:\n    void call() {\n        std::cout << \"Calling from SmartPhone\" << std::endl;\n    }\n};\n\nclass MusicPlayer {\npublic:\n    void playMusic() {\n        std::cout << \"Playing music\" << std::endl;\n    }\n};\n\nclass iPhone : public SmartPhone, public MusicPlayer {\n};\n\nint main() {\n    iPhone iphone;\n    iphone.call();\n    iphone.playMusic();\n    return 0;\n}", "output": "class SmartPhone {\n    public void call() {\n        System.out.println(\"Calling from SmartPhone\");\n    }\n}\n\nclass MusicPlayer {\n    public void playMusic() {\n        System.out.println(\"Playing music\");\n    }\n}\n\nclass iPhone extends SmartPhone, MusicPlayer {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        iPhone iphone = new iPhone();\n        iphone.call();\n        iphone.playMusic();\n    }\n}"}
{"input": "class Shape {\npublic:\n    void draw() {\n        std::cout << \"Drawing shape\" << std::endl;\n    }\n};\n\nclass Color {\npublic:\n    void fill() {\n        std::cout << \"Filling shape with color\" << std::endl;\n    }\n};\n\nclass Circle : public Shape, public Color {\n};\n\nint main() {\n    Circle circle;\n    circle.draw();\n    circle.fill();\n    return 0;\n}", "output": "class Shape {\n    public void draw() {\n        System.out.println(\"Drawing shape\");\n    }\n}\n\nclass Color {\n    public void fill() {\n        System.out.println(\"Filling shape with color\");\n    }\n}\n\nclass Circle extends Shape, Color {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle circle = new Circle();\n        circle.draw();\n        circle.fill();\n    }\n}"}
{"input": "const int MAX_SIZE = 100; int arr[MAX_SIZE]; int main() { arr[0] = 10; return 0; }", "output": "final int MAX_SIZE = 100; int[] arr = new int[MAX_SIZE]; public static void main(String[] args) { arr[0] = 10; }"}
{"input": "const double PI = 3.14159; double area = PI * radius * radius; int main() { double radius = 5; return 0; }", "output": "final double PI = 3.14159; double area = PI * radius * radius; public static void main(String[] args) { double radius = 5; }"}
{"input": "const std::string GREETING = \"Hello, world!\"; std::cout << GREETING << std::endl; int main() { return 0; }", "output": "final String GREETING = \"Hello, world!\"; System.out.println(GREETING); public static void main(String[] args) { }"}
{"input": "const float GRAVITY = 9.8f; float weight = mass * GRAVITY; int main() { float mass = 70.0f; return 0; }", "output": "final float GRAVITY = 9.8f; float weight = mass * GRAVITY; public static void main(String[] args) { float mass = 70.0f; }"}
{"input": "const char NEWLINE = '\\n'; std::cout << \"Line 1\" << NEWLINE << \"Line 2\" << std::endl; int main() { return 0; }", "output": "final char NEWLINE = '\\n'; System.out.println(\"Line 1\" + NEWLINE + \"Line 2\"); public static void main(String[] args) { }"}
{"input": "const bool IS_ACTIVE = true; if (IS_ACTIVE) { std::cout << \"Active\" << std::endl; } int main() { return 0; }", "output": "final boolean IS_ACTIVE = true; if (IS_ACTIVE) { System.out.println(\"Active\"); } public static void main(String[] args) { }"}
{"input": "const long MAX_COUNT = 1000000000; long count = MAX_COUNT; int main() { return 0; }", "output": "final long MAX_COUNT = 1000000000; long count = MAX_COUNT; public static void main(String[] args) { }"}
{"input": "const unsigned int FLAGS = 0xFF; unsigned int flagSet = FLAGS; int main() { return 0; }", "output": "final int FLAGS = 0xFF; int flagSet = FLAGS; public static void main(String[] args) { }"}
{"input": "const short MAX_VALUE = 32767; short value = MAX_VALUE; int main() { return 0; }", "output": "final short MAX_VALUE = 32767; short value = MAX_VALUE; public static void main(String[] args) { }"}
{"input": "const std::string FILE_PATH = \"C:/example.txt\"; std::ifstream file(FILE_PATH); int main() { return 0; }", "output": "final String FILE_PATH = \"C:/example.txt\"; File file = new File(FILE_PATH); public static void main(String[] args) { }"}
{"input": "const int DAYS_IN_WEEK = 7; int totalDays = DAYS_IN_WEEK * 4; int main() { return 0; }", "output": "final int DAYS_IN_WEEK = 7; int totalDays = DAYS_IN_WEEK * 4; public static void main(String[] args) { }"}
{"input": "const std::string ERROR_MESSAGE = \"An error occurred!\"; std::cout << ERROR_MESSAGE << std::endl; int main() { return 0; }", "output": "final String ERROR_MESSAGE = \"An error occurred!\"; System.out.println(ERROR_MESSAGE); public static void main(String[] args) { }"}
{"input": "const float PI = 3.14159; float circumference = 2 * PI * radius; int main() { float radius = 10.0f; return 0; }", "output": "final float PI = 3.14159; float circumference = 2 * PI * radius; public static void main(String[] args) { float radius = 10.0f; }"}
{"input": "const int MAX_LENGTH = 255; char str[MAX_LENGTH]; int main() { return 0; }", "output": "final int MAX_LENGTH = 255; char[] str = new char[MAX_LENGTH]; public static void main(String[] args) { }"}
{"input": "const unsigned int MAX_VALUE = 1024; unsigned int value = MAX_VALUE; int main() { return 0; }", "output": "final int MAX_VALUE = 1024; int value = MAX_VALUE; public static void main(String[] args) { }"}
{"input": "const bool DEBUG_MODE = false; if (DEBUG_MODE) { std::cout << \"Debugging\" << std::endl; } int main() { return 0; }", "output": "final boolean DEBUG_MODE = false; if (DEBUG_MODE) { System.out.println(\"Debugging\"); } public static void main(String[] args) { }"}
{"input": "const double SPEED_OF_LIGHT = 299792458.0; double time = distance / SPEED_OF_LIGHT; int main() { double distance = 150000000; return 0; }", "output": "final double SPEED_OF_LIGHT = 299792458.0; double time = distance / SPEED_OF_LIGHT; public static void main(String[] args) { double distance = 150000000; }"}
{"input": "const long MAX_COUNT = 1000000; long count = MAX_COUNT - 1; int main() { return 0; }", "output": "final long MAX_COUNT = 1000000; long count = MAX_COUNT - 1; public static void main(String[] args) { }"}
{"input": "const short MIN_VALUE = -32768; short value = MIN_VALUE + 1; int main() { return 0; }", "output": "final short MIN_VALUE = -32768; short value = MIN_VALUE + 1; public static void main(String[] args) { }"}
{"input": "const std::string DEFAULT_PATH = \"/home/user/\"; std::cout << DEFAULT_PATH << std::endl; int main() { return 0; }", "output": "final String DEFAULT_PATH = \"/home/user/\"; System.out.println(DEFAULT_PATH); public static void main(String[] args) { }"}
{"input": "void printMessage(const std::string& message) { std::cout << message << std::endl; } int main() { const std::string greeting = \"Hello, World!\"; printMessage(greeting); return 0; }", "output": "public static void printMessage(final String message) { System.out.println(message); } public static void main(String[] args) { final String greeting = \"Hello, World!\"; printMessage(greeting); }"}
{"input": "int add(const int a, const int b) { return a + b; } int main() { const int x = 5, y = 10; int result = add(x, y); return 0; }", "output": "public static int add(final int a, final int b) { return a + b; } public static void main(String[] args) { final int x = 5, y = 10; int result = add(x, y); }"}
{"input": "void displayCoordinates(const int x, const int y) { std::cout << \"Coordinates: \" << x << \", \" << y << std::endl; } int main() { const int x = 10, y = 20; displayCoordinates(x, y); return 0; }", "output": "public static void displayCoordinates(final int x, final int y) { System.out.println(\"Coordinates: \" + x + \", \" + y); } public static void main(String[] args) { final int x = 10, y = 20; displayCoordinates(x, y); }"}
{"input": "double multiply(const double a, const double b) { return a * b; } int main() { const double val1 = 2.5, val2 = 4.0; double result = multiply(val1, val2); return 0; }", "output": "public static double multiply(final double a, final double b) { return a * b; } public static void main(String[] args) { final double val1 = 2.5, val2 = 4.0; double result = multiply(val1, val2); }"}
{"input": "void printArray(const int arr[], const int size) { for (int i = 0; i < size; ++i) std::cout << arr[i] << \" \"; std::cout << std::endl; } int main() { const int arr[] = {1, 2, 3, 4, 5}; printArray(arr, 5); return 0; }", "output": "public static void printArray(final int[] arr, final int size) { for (int i = 0; i < size; i++) System.out.print(arr[i] + \" \"); System.out.println(); } public static void main(String[] args) { final int[] arr = {1, 2, 3, 4, 5}; printArray(arr, 5); }"}
{"input": "void calculateRectangleArea(const double width, const double height) { std::cout << \"Area: \" << width * height << std::endl; } int main() { const double w = 7.0, h = 3.5; calculateRectangleArea(w, h); return 0; }", "output": "public static void calculateRectangleArea(final double width, final double height) { System.out.println(\"Area: \" + width * height); } public static void main(String[] args) { final double w = 7.0, h = 3.5; calculateRectangleArea(w, h); }"}
{"input": "void concatenateStrings(const std::string& str1, const std::string& str2) { std::cout << str1 + str2 << std::endl; } int main() { const std::string part1 = \"Hello, \", part2 = \"World!\"; concatenateStrings(part1, part2); return 0; }", "output": "public static void concatenateStrings(final String str1, final String str2) { System.out.println(str1 + str2); } public static void main(String[] args) { final String part1 = \"Hello, \", part2 = \"World!\"; concatenateStrings(part1, part2); }"}
{"input": "void printTemperature(const float temperature) { std::cout << \"Temperature: \" << temperature << \"°C\" << std::endl; } int main() { const float temp = 22.5; printTemperature(temp); return 0; }", "output": "public static void printTemperature(final float temperature) { System.out.println(\"Temperature: \" + temperature + \"°C\"); } public static void main(String[] args) { final float temp = 22.5; printTemperature(temp); }"}
{"input": "double divide(const double numerator, const double denominator) { return numerator / denominator; } int main() { const double num = 10.0, denom = 2.0; double result = divide(num, denom); return 0; }", "output": "public static double divide(final double numerator, final double denominator) { return numerator / denominator; } public static void main(String[] args) { final double num = 10.0, denom = 2.0; double result = divide(num, denom); }"}
{"input": "void printDetails(const std::string& name, const int age) { std::cout << \"Name: \" << name << \", Age: \" << age << std::endl; } int main() { const std::string name = \"Alice\"; const int age = 30; printDetails(name, age); return 0; }", "output": "public static void printDetails(final String name, final int age) { System.out.println(\"Name: \" + name + \", Age: \" + age); } public static void main(String[] args) { final String name = \"Alice\"; final int age = 30; printDetails(name, age); }"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateArea(const double radius) {\n    return 3.14159 * radius * radius;\n}\n\nint main() {\n    const double radius = 5.0;\n    const double area = calculateArea(radius);\n    cout << \"Area: \" << area << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateArea(final double radius) {\n        return Math.PI * radius * radius;\n    }\n\n    public static void main(String[] args) {\n        final double radius = 5.0;\n        final double area = calculateArea(radius);\n        System.out.println(\"Area: \" + area);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateTotalPrice(const double price, const double taxRate) {\n    return price + (price * taxRate);\n}\n\nint main() {\n    const double price = 100.0;\n    const double taxRate = 0.15;\n    const double totalPrice = calculateTotalPrice(price, taxRate);\n    cout << \"Total Price: \" << totalPrice << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateTotalPrice(final double price, final double taxRate) {\n        return price + (price * taxRate);\n    }\n\n    public static void main(String[] args) {\n        final double price = 100.0;\n        final double taxRate = 0.15;\n        final double totalPrice = calculateTotalPrice(price, taxRate);\n        System.out.println(\"Total Price: \" + totalPrice);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateVolume(const double length, const double width, const double height) {\n    return length * width * height;\n}\n\nint main() {\n    const double length = 10.0, width = 5.0, height = 2.0;\n    const double volume = calculateVolume(length, width, height);\n    cout << \"Volume: \" << volume << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateVolume(final double length, final double width, final double height) {\n        return length * width * height;\n    }\n\n    public static void main(String[] args) {\n        final double length = 10.0, width = 5.0, height = 2.0;\n        final double volume = calculateVolume(length, width, height);\n        System.out.println(\"Volume: \" + volume);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateBMI(const double weight, const double height) {\n    return weight / (height * height);\n}\n\nint main() {\n    const double weight = 70.0, height = 1.75;\n    const double bmi = calculateBMI(weight, height);\n    cout << \"BMI: \" << bmi << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateBMI(final double weight, final double height) {\n        return weight / (height * height);\n    }\n\n    public static void main(String[] args) {\n        final double weight = 70.0, height = 1.75;\n        final double bmi = calculateBMI(weight, height);\n        System.out.println(\"BMI: \" + bmi);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double convertToFahrenheit(const double celsius) {\n    return (celsius * 9.0 / 5.0) + 32.0;\n}\n\nint main() {\n    const double celsius = 25.0;\n    const double fahrenheit = convertToFahrenheit(celsius);\n    cout << \"Fahrenheit: \" << fahrenheit << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double convertToFahrenheit(final double celsius) {\n        return (celsius * 9.0 / 5.0) + 32.0;\n    }\n\n    public static void main(String[] args) {\n        final double celsius = 25.0;\n        final double fahrenheit = convertToFahrenheit(celsius);\n        System.out.println(\"Fahrenheit: \" + fahrenheit);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateInterest(const double principal, const double rate, const int time) {\n    return principal * rate * time / 100.0;\n}\n\nint main() {\n    const double principal = 1000.0, rate = 5.0;\n    const int time = 2;\n    const double interest = calculateInterest(principal, rate, time);\n    cout << \"Interest: \" << interest << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateInterest(final double principal, final double rate, final int time) {\n        return principal * rate * time / 100.0;\n    }\n\n    public static void main(String[] args) {\n        final double principal = 1000.0, rate = 5.0;\n        final int time = 2;\n        final double interest = calculateInterest(principal, rate, time);\n        System.out.println(\"Interest: \" + interest);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double convertToKilometers(const double miles) {\n    return miles * 1.60934;\n}\n\nint main() {\n    const double miles = 100.0;\n    const double kilometers = convertToKilometers(miles);\n    cout << \"Kilometers: \" << kilometers << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double convertToKilometers(final double miles) {\n        return miles * 1.60934;\n    }\n\n    public static void main(String[] args) {\n        final double miles = 100.0;\n        final double kilometers = convertToKilometers(miles);\n        System.out.println(\"Kilometers: \" + kilometers);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateDistance(const double speed, const double time) {\n    return speed * time;\n}\n\nint main() {\n    const double speed = 60.0, time = 2.0;\n    const double distance = calculateDistance(speed, time);\n    cout << \"Distance: \" << distance << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateDistance(final double speed, final double time) {\n        return speed * time;\n    }\n\n    public static void main(String[] args) {\n        final double speed = 60.0, time = 2.0;\n        final double distance = calculateDistance(speed, time);\n        System.out.println(\"Distance: \" + distance);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nconst double calculateSpeed(const double distance, const double time) {\n    return distance / time;\n}\n\nint main() {\n    const double distance = 120.0, time = 2.0;\n    const double speed = calculateSpeed(distance, time);\n    cout << \"Speed: \" << speed << endl;\n    return 0;\n}", "output": "import java.util.*;\n\npublic class Main {\n    public static double calculateSpeed(final double distance, final double time) {\n        return distance / time;\n    }\n\n    public static void main(String[] args) {\n        final double distance = 120.0, time = 2.0;\n        final double speed = calculateSpeed(distance, time);\n        System.out.println(\"Speed: \" + speed);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[3] = {10, 20, 30};\n    arr[1] = 40;\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30};\n        arr[1] = 40;\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; ++i) {\n        sum += arr[i];\n    }\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        System.out.println(\"Sum: \" + sum);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    cout << \"First element: \" << arr[0] << endl;\n    cout << \"Last element: \" << arr[4] << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        System.out.println(\"First element: \" + arr[0]);\n        System.out.println(\"Last element: \" + arr[4]);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            cout << arr[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[][] arr = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i].length; j++) {\n                System.out.print(arr[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int max = arr[0];\n    for (int i = 1; i < 5; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    cout << \"Max element: \" << max << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        System.out.println(\"Max element: \" + max);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; ++i) {\n        arr[i] *= 2;\n    }\n    for (int i = 0; i < 5; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] *= 2;\n        }\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; ++i) {\n        sum += arr[i];\n    }\n    cout << \"Average: \" << sum / 5.0 << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        System.out.println(\"Average: \" + sum / 5.0);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; ++i) {\n        if (arr[i] % 2 == 0) {\n            cout << arr[i] << \" \";\n        }\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] % 2 == 0) {\n                System.out.print(arr[i] + \" \");\n            }\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    cout << \"Array size: \" << sizeof(arr) / sizeof(arr[0]) << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        System.out.println(\"Array size: \" + arr.length);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int product = 1;\n    for (int i = 0; i < 5; ++i) {\n        product *= arr[i];\n    }\n    cout << \"Product: \" << product << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int product = 1;\n        for (int i = 0; i < arr.length; i++) {\n            product *= arr[i];\n        }\n        System.out.println(\"Product: \" + product);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; ++i) {\n        arr[i] = arr[i] * 2;\n    }\n    for (int i = 0; i < 5; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = arr[i] * 2;\n        }\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 4; i >= 0; --i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        for (int i = arr.length - 1; i >= 0; i--) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int max = arr[0];\n    int min = arr[0];\n    for (int i = 1; i < 5; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    cout << \"Max: \" << max << \" Min: \" << min << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int max = arr[0];\n        int min = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        System.out.println(\"Max: \" + max + \" Min: \" + min);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; ++i) {\n        sum += arr[i];\n    }\n    cout << \"Average: \" << sum / 5.0 << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        System.out.println(\"Average: \" + sum / 5.0);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int target = 4;\n    bool found = false;\n    for (int i = 0; i < 5; ++i) {\n        if (arr[i] == target) {\n            found = true;\n            break;\n        }\n    }\n    cout << (found ? \"Found\" : \"Not found\") << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int target = 4;\n        boolean found = false;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == target) {\n                found = true;\n                break;\n            }\n        }\n        System.out.println(found ? \"Found\" : \"Not found\");\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int target = 4;\n    int index = -1;\n    for (int i = 0; i < 5; ++i) {\n        if (arr[i] == target) {\n            index = i;\n            break;\n        }\n    }\n    cout << \"Index: \" << index << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int target = 4;\n        int index = -1;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == target) {\n                index = i;\n                break;\n            }\n        }\n        System.out.println(\"Index: \" + index);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; ++i) {\n        sum += arr[i];\n    }\n    double average = sum / 5.0;\n    for (int i = 0; i < 5; ++i) {\n        if (arr[i] > average) {\n            cout << arr[i] << \" \";\n        }\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        double average = sum / 5.0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > average) {\n                System.out.print(arr[i] + \" \");\n            }\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string arr[3] = {\"apple\", \"banana\", \"cherry\"};\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String[] arr = {\"apple\", \"banana\", \"cherry\"};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    double arr[4] = {1.5, 2.3, 3.7, 4.4};\n    double sum = 0;\n    for (int i = 0; i < 4; ++i) {\n        sum += arr[i];\n    }\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        double[] arr = {1.5, 2.3, 3.7, 4.4};\n        double sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        System.out.println(\"Sum: \" + sum);\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string arr[3] = {\"one\", \"two\", \"three\"};\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String[] arr = {\"one\", \"two\", \"three\"};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char arr[3] = {'A', 'B', 'C'};\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        char[] arr = {'A', 'B', 'C'};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    bool arr[2] = {true, false};\n    for (int i = 0; i < 2; ++i) {\n        cout << (arr[i] ? \"true\" : \"false\") << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        boolean[] arr = {true, false};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] ? \"true\" : \"false\" + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    float arr[4] = {1.1f, 2.2f, 3.3f, 4.4f};\n    for (int i = 0; i < 4; ++i) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        float[] arr = {1.1f, 2.2f, 3.3f, 4.4f};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string arr[4] = {\"apple\", \"orange\", \"banana\", \"grape\"};\n    int len = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Array length: \" << len << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        String[] arr = {\"apple\", \"orange\", \"banana\", \"grape\"};\n        int len = arr.length;\n        System.out.println(\"Array length: \" + len);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[6] = {10, 20, 30, 40, 50, 60};\n    int sum = 0;\n    for (int i = 0; i < 6; ++i) {\n        sum += arr[i];\n    }\n    cout << \"Sum of array elements: \" << sum << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 40, 50, 60};\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        System.out.println(\"Sum of array elements: \" + sum);\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {5, 10, 15, 20, 25};\n    int target = 20;\n    bool found = false;\n    for (int i = 0; i < 5; ++i) {\n        if (arr[i] == target) {\n            found = true;\n            break;\n        }\n    }\n    cout << (found ? \"Found\" : \"Not found\") << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {5, 10, 15, 20, 25};\n        int target = 20;\n        boolean found = false;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == target) {\n                found = true;\n                break;\n            }\n        }\n        System.out.println(found ? \"Found\" : \"Not found\");\n    }\n}"}
{"input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    double arr[5] = {1.1, 2.2, 3.3, 4.4, 5.5};\n    double max = arr[0];\n    for (int i = 1; i < 5; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    cout << \"Max value: \" << max << endl;\n    return 0;\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        double[] arr = {1.1, 2.2, 3.3, 4.4, 5.5};\n        double max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        System.out.println(\"Max value: \" + max);\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Person {\npublic:\n    string name;\n    int age;\n    Person(string n, int a) : name(n), age(a) {}\n};\n\nint main() {\n    Person arr[2] = {Person(\"Alice\", 30), Person(\"Bob\", 25)};\n    for (int i = 0; i < 2; ++i) {\n        cout << arr[i].name << \" \" << arr[i].age << endl;\n    }\n    return 0;\n}", "output": "public class Person {\n    String name;\n    int age;\n    Person(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    public static void main(String[] args) {\n        Person[] arr = {new Person(\"Alice\", 30), new Person(\"Bob\", 25)};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].name + \" \" + arr[i].age);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Car {\npublic:\n    string brand;\n    string model;\n    Car(string b, string m) : brand(b), model(m) {}\n};\n\nint main() {\n    Car arr[3] = {Car(\"Toyota\", \"Corolla\"), Car(\"Honda\", \"Civic\"), Car(\"Ford\", \"Focus\")};\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i].brand << \" \" << arr[i].model << endl;\n    }\n    return 0;\n}", "output": "public class Car {\n    String brand;\n    String model;\n    Car(String b, String m) {\n        brand = b;\n        model = m;\n    }\n\n    public static void main(String[] args) {\n        Car[] arr = {new Car(\"Toyota\", \"Corolla\"), new Car(\"Honda\", \"Civic\"), new Car(\"Ford\", \"Focus\")};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].brand + \" \" + arr[i].model);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Book {\npublic:\n    string title;\n    string author;\n    Book(string t, string a) : title(t), author(a) {}\n};\n\nint main() {\n    Book arr[2] = {Book(\"1984\", \"George Orwell\"), Book(\"Brave New World\", \"Aldous Huxley\")};\n    for (int i = 0; i < 2; ++i) {\n        cout << arr[i].title << \" by \" << arr[i].author << endl;\n    }\n    return 0;\n}", "output": "public class Book {\n    String title;\n    String author;\n    Book(String t, String a) {\n        title = t;\n        author = a;\n    }\n\n    public static void main(String[] args) {\n        Book[] arr = {new Book(\"1984\", \"George Orwell\"), new Book(\"Brave New World\", \"Aldous Huxley\")};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].title + \" by \" + arr[i].author);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Student {\npublic:\n    string name;\n    int grade;\n    Student(string n, int g) : name(n), grade(g) {}\n};\n\nint main() {\n    Student arr[3] = {Student(\"John\", 85), Student(\"Jane\", 90), Student(\"Jack\", 88)};\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i].name << \" : \" << arr[i].grade << endl;\n    }\n    return 0;\n}", "output": "public class Student {\n    String name;\n    int grade;\n    Student(String n, int g) {\n        name = n;\n        grade = g;\n    }\n\n    public static void main(String[] args) {\n        Student[] arr = {new Student(\"John\", 85), new Student(\"Jane\", 90), new Student(\"Jack\", 88)};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].name + \" : \" + arr[i].grade);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Person {\npublic:\n    string name;\n    Person(string n) : name(n) {}\n};\n\nint main() {\n    Person arr[2] = {Person(\"Alice\"), Person(\"Bob\")};\n    for (int i = 0; i < 2; ++i) {\n        cout << arr[i].name << endl;\n    }\n    return 0;\n}", "output": "public class Person {\n    String name;\n    Person(String n) {\n        name = n;\n    }\n\n    public static void main(String[] args) {\n        Person[] arr = {new Person(\"Alice\"), new Person(\"Bob\")};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].name);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Animal {\npublic:\n    string species;\n    Animal(string s) : species(s) {}\n};\n\nint main() {\n    Animal arr[3] = {Animal(\"Dog\"), Animal(\"Cat\"), Animal(\"Bird\")};\n    for (int i = 0; i < 3; ++i) {\n        cout << arr[i].species << endl;\n    }\n    return 0;\n}", "output": "public class Animal {\n    String species;\n    Animal(String s) {\n        species = s;\n    }\n\n    public static void main(String[] args) {\n        Animal[] arr = {new Animal(\"Dog\"), new Animal(\"Cat\"), new Animal(\"Bird\")};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].species);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Laptop {\npublic:\n    string brand;\n    string model;\n    Laptop(string b, string m) : brand(b), model(m) {}\n};\n\nint main() {\n    Laptop arr[2] = {Laptop(\"Dell\", \"XPS 13\"), Laptop(\"Apple\", \"MacBook Pro\")};\n    for (int i = 0; i < 2; ++i) {\n        cout << arr[i].brand << \" \" << arr[i].model << endl;\n    }\n    return 0;\n}", "output": "public class Laptop {\n    String brand;\n    String model;\n    Laptop(String b, String m) {\n        brand = b;\n        model = m;\n    }\n\n    public static void main(String[] args) {\n        Laptop[] arr = {new Laptop(\"Dell\", \"XPS 13\"), new Laptop(\"Apple\", \"MacBook Pro\")};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].brand + \" \" + arr[i].model);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Employee {\npublic:\n    string name;\n    double salary;\n    Employee(string n, double s) : name(n), salary(s) {}\n};\n\nint main() {\n    Employee arr[2] = {Employee(\"John\", 50000), Employee(\"Sarah\", 60000)};\n    for (int i = 0; i < 2; ++i) {\n        cout << arr[i].name << \" : \" << arr[i].salary << endl;\n    }\n    return 0;\n}", "output": "public class Employee {\n    String name;\n    double salary;\n    Employee(String n, double s) {\n        name = n;\n        salary = s;\n    }\n\n    public static void main(String[] args) {\n        Employee[] arr = {new Employee(\"John\", 50000), new Employee(\"Sarah\", 60000)};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].name + \" : \" + arr[i].salary);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Product {\npublic:\n    string name;\n    double price;\n    Product(string n, double p) : name(n), price(p) {}\n};\n\nint main() {\n    Product arr[2] = {Product(\"Laptop\", 1200.99), Product(\"Smartphone\", 799.49)};\n    for (int i = 0; i < 2; ++i) {\n        cout << arr[i].name << \" : \" << arr[i].price << endl;\n    }\n    return 0;\n}", "output": "public class Product {\n    String name;\n    double price;\n    Product(String n, double p) {\n        name = n;\n        price = p;\n    }\n\n    public static void main(String[] args) {\n        Product[] arr = {new Product(\"Laptop\", 1200.99), new Product(\"Smartphone\", 799.49)};\n        for (int i = 0; i < arr.length; i++) {\n            System.out.println(arr[i].name + \" : \" + arr[i].price);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<string> v = {\"Alice\", \"Bob\", \"Charlie\"};\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"Alice\");\n        list.add(\"Bob\");\n        list.add(\"Charlie\");\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<float> v = {3.14f, 1.59f, 2.65f};\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Float> list = new ArrayList<>();\n        list.add(3.14f);\n        list.add(1.59f);\n        list.add(2.65f);\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3, 4, 5};\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<string> l = {\"Alice\", \"Bob\", \"Charlie\"};\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<String> list = new LinkedList<>();\n        list.add(\"Alice\");\n        list.add(\"Bob\");\n        list.add(\"Charlie\");\n        for (String name : list) {\n            System.out.println(name);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v;\n    v.push_back(10);\n    v.push_back(20);\n    v.push_back(30);\n    v.push_back(40);\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(10);\n        list.add(20);\n        list.add(30);\n        list.add(40);\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {100, 200, 300, 400};\n    l.push_back(500);\n    l.push_front(50);\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(100);\n        list.add(200);\n        list.add(300);\n        list.add(400);\n        list.add(500);\n        list.addFirst(50);\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<string> v = {\"apple\", \"banana\", \"cherry\"};\n    for (const auto& item : v) {\n        cout << item << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n        for (String item : list) {\n            System.out.println(item);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    v.erase(v.begin() + 2);\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.remove(2);\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    cout << v.at(2) << endl;\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        System.out.println(list.get(2));\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    v.insert(v.begin() + 2, 10);\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.add(2, 10);\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3, 4, 5};\n    l.reverse();\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.reverse();\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    v.pop_back();\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.remove(list.size() - 1);\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3, 4, 5};\n    l.remove(3);\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.remove(Integer.valueOf(3));\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    v.clear();\n    cout << v.size() << endl;\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.clear();\n        System.out.println(list.size());\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3, 4, 5};\n    l.sort();\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\nimport java.util.Collections;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        Collections.sort(list);\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    v.swap(v); // Self swap\n    for (int i = 0; i < v.size(); ++i) {\n        cout << v[i] << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.addAll(list); // Self swap\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {5, 4, 3, 2, 1};\n    l.sort();\n    l.reverse();\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}", "output": "import java.util.LinkedList;\nimport java.util.Collections;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(5);\n        list.add(4);\n        list.add(3);\n        list.add(2);\n        list.add(1);\n        Collections.sort(list);\n        Collections.reverse(list);\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"one\"}, {2, \"two\"}, {3, \"three\"}};\n    m[4] = \"four\";\n    for (const auto& pair : m) {\n        cout << pair.first << ": " << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        map.put(4, \"four\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    unordered_map<int, string> um = {{1, \"apple\"}, {2, \"banana\"}, {3, \"cherry\"}};\n    um[4] = \"date\";\n    for (const auto& pair : um) {\n        cout << pair.first << ": " << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"apple\");\n        map.put(2, \"banana\");\n        map.put(3, \"cherry\");\n        map.put(4, \"date\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <queue>\nusing namespace std;\n\nint main() {\n    queue<int> q;\n    q.push(1);\n    q.push(2);\n    q.push(3);\n    cout << q.front() << endl;\n    q.pop();\n    cout << q.front() << endl;\n    return 0;\n}", "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Main {\n    public static void main(String[] args) {\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        System.out.println(queue.peek());\n        queue.poll();\n        System.out.println(queue.peek());\n    }\n}"}
{"input": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nint main() {\n    stack<int> st;\n    st.push(1);\n    st.push(2);\n    st.push(3);\n    cout << st.top() << endl;\n    st.pop();\n    cout << st.top() << endl;\n    return 0;\n}", "output": "import java.util.Stack;\n\npublic class Main {\n    public static void main(String[] args) {\n        Stack<Integer> stack = new Stack<>();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(stack.peek());\n        stack.pop();\n        System.out.println(stack.peek());\n    }\n}"}
{"input": "#include <iostream>\n#include <deque>\nusing namespace std;\n\nint main() {\n    deque<int> dq = {1, 2, 3, 4, 5};\n    dq.push_front(0);\n    dq.push_back(6);\n    for (const int& num : dq) {\n        cout << num << endl;\n    }\n    return 0;\n}", "output": "import java.util.ArrayDeque;\nimport java.util.Deque;\n\npublic class Main {\n    public static void main(String[] args) {\n        Deque<Integer> deque = new ArrayDeque<>();\n        deque.add(1);\n        deque.add(2);\n        deque.add(3);\n        deque.add(4);\n        deque.add(5);\n        deque.addFirst(0);\n        deque.addLast(6);\n        for (Integer num : deque) {\n            System.out.println(num);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <set>\nusing namespace std;\n\nint main() {\n    set<string> s = {\"apple\", \"banana\", \"cherry\"};\n    s.insert(\"date\");\n    for (const string& str : s) {\n        cout << str << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashSet<String> set = new HashSet<>();\n        set.add(\"apple\");\n        set.add(\"banana\");\n        set.add(\"cherry\");\n        set.add(\"date\");\n        for (String str : set) {\n            System.out.println(str);\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"one\"}, {2, \"two\"}, {3, \"three\"}};\n    m.erase(2);\n    for (const auto& pair : m) {\n        cout << pair.first << ": " << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        map.remove(2);\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nint main() {\n    stack<string> st;\n    st.push(\"apple\");\n    st.push(\"banana\");\n    st.push(\"cherry\");\n    cout << st.top() << endl;\n    st.pop();\n    cout << st.top() << endl;\n    return 0;\n}", "output": "import java.util.Stack;\n\npublic class Main {\n    public static void main(String[] args) {\n        Stack<String> stack = new Stack<>();\n        stack.push(\"apple\");\n        stack.push(\"banana\");\n        stack.push(\"cherry\");\n        System.out.println(stack.peek());\n        stack.pop();\n        System.out.println(stack.peek());\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"one\"}, {2, \"two\"}, {3, \"three\"}};\n    m[4] = \"four\";\n    for (const auto& pair : m) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        map.put(4, \"four\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"apple\"}, {2, \"banana\"}, {3, \"cherry\"}};\n    m[4] = \"date\";\n    m.erase(2);\n    for (const auto& pair : m) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"apple\");\n        map.put(2, \"banana\");\n        map.put(3, \"cherry\");\n        map.put(4, \"date\");\n        map.remove(2);\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    unordered_map<int, string> um = {{1, \"apple\"}, {2, \"banana\"}, {3, \"cherry\"}};\n    um[4] = \"date\";\n    um.erase(2);\n    for (const auto& pair : um) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"apple\");\n        map.put(2, \"banana\");\n        map.put(3, \"cherry\");\n        map.put(4, \"date\");\n        map.remove(2);\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<string, int> m = {\"apple\": 3, \"banana\": 2, \"cherry\": 5};\n    m["date"] = 4;\n    m["banana"] = 6;\n    for (const auto& pair : m) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"apple\", 3);\n        map.put(\"banana\", 2);\n        map.put(\"cherry\", 5);\n        map.put(\"date\", 4);\n        map.put(\"banana\", 6);\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m;\n    m.insert({1, \"A\"});\n    m.insert({2, \"B\"});\n    m.insert({3, \"C\"});\n    for (auto& pair : m) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"A\");\n        map.put(2, \"B\");\n        map.put(3, \"C\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"John\"}, {2, \"Jane\"}};\n    m[3] = \"Mike\";\n    cout << \"Size: \" << m.size() << endl;\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"John\");\n        map.put(2, \"Jane\");\n        map.put(3, \"Mike\");\n        System.out.println(\"Size: \" + map.size());\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m;\n    m[1] = \"Alice\";\n    m[2] = \"Bob\";\n    m[3] = \"Charlie\";\n    cout << m[2] << endl;  // Output value for key 2\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"Alice\");\n        map.put(2, \"Bob\");\n        map.put(3, \"Charlie\");\n        System.out.println(map.get(2));  // Output value for key 2\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"alpha\"}, {2, \"beta\"}, {3, \"gamma\"}};\n    m[4] = \"delta\";\n    m.erase(3);  // Erasing an element\n    for (const auto& pair : m) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"alpha\");\n        map.put(2, \"beta\");\n        map.put(3, \"gamma\");\n        map.put(4, \"delta\");\n        map.remove(3);  // Erasing an element\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"}
{"input": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m = {{1, \"red\"}, {2, \"green\"}, {3, \"blue\"}};\n    cout << \"Contains key 2: \" << (m.count(2) ? \"Yes\" : \"No\") << endl;\n    return 0;\n}", "output": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"red\");\n        map.put(2, \"green\");\n        map.put(3, \"blue\");\n        System.out.println(\"Contains key 2: \" + (map.containsKey(2) ? \"Yes\" : \"No\"));\n    }\n}"}
{"input": "class Animal {\npublic:\n    virtual void speak() {\n        std::cout << \"Animal sound\" << std::endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void speak() override {\n        std::cout << \"Woof\" << std::endl;\n    }\n};", "output": "class Animal {\n    public void speak() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    public void speak() {\n        System.out.println(\"Woof\");\n    }\n}"}
{"input": "class Base {\npublic:\n    virtual int getValue() const {\n        return 0;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    int getValue() const override {\n        return 42;\n    }\n};", "output": "class Base {\n    public int getValue() {\n        return 0;\n    }\n}\n\nclass Derived extends Base {\n    @Override\n    public int getValue() {\n        return 42;\n    }\n}"}
{"input": "class Shape {\npublic:\n    virtual void draw() {\n        std::cout << \"Drawing shape\" << std::endl;\n    }\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() override {\n        std::cout << \"Drawing circle\" << std::endl;\n    }\n};", "output": "class Shape {\n    public void draw() {\n        System.out.println(\"Drawing shape\");\n    }\n}\n\nclass Circle extends Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing circle\");\n    }\n}"}
{"input": "class Vehicle {\npublic:\n    virtual void start() {\n        std::cout << \"Starting vehicle\" << std::endl;\n    }\n};\n\nclass Car : public Vehicle {\npublic:\n    void start() override {\n        std::cout << \"Starting car\" << std::endl;\n    }\n};", "output": "class Vehicle {\n    public void start() {\n        System.out.println(\"Starting vehicle\");\n    }\n}\n\nclass Car extends Vehicle {\n    @Override\n    public void start() {\n        System.out.println(\"Starting car\");\n    }\n}"}
{"input": "class Printer {\npublic:\n    virtual void print() {\n        std::cout << \"Printing document\" << std::endl;\n    }\n};\n\nclass ColorPrinter : public Printer {\npublic:\n    void print() override {\n        std::cout << \"Printing in color\" << std::endl;\n    }\n};", "output": "class Printer {\n    public void print() {\n        System.out.println(\"Printing document\");\n    }\n}\n\nclass ColorPrinter extends Printer {\n    @Override\n    public void print() {\n        System.out.println(\"Printing in color\");\n    }\n}"}
{"input": "class Logger {\npublic:\n    virtual void log(const std::string& msg) {\n        std::cout << \"Log: \" << msg << std::endl;\n    }\n};\n\nclass FileLogger : public Logger {\npublic:\n    void log(const std::string& msg) override {\n        std::cout << \"File log: \" << msg << std::endl;\n    }\n};", "output": "class Logger {\n    public void log(String msg) {\n        System.out.println(\"Log: \" + msg);\n    }\n}\n\nclass FileLogger extends Logger {\n    @Override\n    public void log(String msg) {\n        System.out.println(\"File log: \" + msg);\n    }\n}"}
{"input": "class MediaPlayer {\npublic:\n    virtual void play() {\n        std::cout << \"Playing media\" << std::endl;\n    }\n};\n\nclass AudioPlayer : public MediaPlayer {\npublic:\n    void play() override {\n        std::cout << \"Playing audio\" << std::endl;\n    }\n};", "output": "class MediaPlayer {\n    public void play() {\n        System.out.println(\"Playing media\");\n    }\n}\n\nclass AudioPlayer extends MediaPlayer {\n    @Override\n    public void play() {\n        System.out.println(\"Playing audio\");\n    }\n}"}
{"input": "class Employee {\npublic:\n    virtual std::string getRole() {\n        return \"Employee\";\n    }\n};\n\nclass Manager : public Employee {\npublic:\n    std::string getRole() override {\n        return \"Manager\";\n    }\n};", "output": "class Employee {\n    public String getRole() {\n        return \"Employee\";\n    }\n}\n\nclass Manager extends Employee {\n    @Override\n    public String getRole() {\n        return \"Manager\";\n    }\n}"}
{"input": "class Notification {\npublic:\n    virtual void send() {\n        std::cout << \"Sending notification\" << std::endl;\n    }\n};\n\nclass EmailNotification : public Notification {\npublic:\n    void send() override {\n        std::cout << \"Sending email\" << std::endl;\n    }\n};", "output": "class Notification {\n    public void send() {\n        System.out.println(\"Sending notification\");\n    }\n}\n\nclass EmailNotification extends Notification {\n    @Override\n    public void send() {\n        System.out.println(\"Sending email\");\n    }\n}"}
{"input": "class Account {\npublic:\n    virtual double interestRate() {\n        return 0.01;\n    }\n};\n\nclass SavingsAccount : public Account {\npublic:\n    double interestRate() override {\n        return 0.03;\n    }\n};", "output": "class Account {\n    public double interestRate() {\n        return 0.01;\n    }\n}\n\nclass SavingsAccount extends Account {\n    @Override\n    public double interestRate() {\n        return 0.03;\n    }\n}"}
{"input": "int x = 10;\nint* ptr = &x;\nstd::cout << *ptr << std::endl;", "output": "int x = 10;\nInteger ref = x;\nSystem.out.println(ref);"}
{"input": "int a = 5;\nint* b = &a;\n*b = 7;\nstd::cout << a << std::endl;", "output": "int a = 5;\nint b = 7;\na = b;\nSystem.out.println(a);"}
{"input": "void increment(int* p) {\n    (*p)++;\n}\n\nint main() {\n    int x = 3;\n    increment(&x);\n    std::cout << x << std::endl;\n}", "output": "void increment(IntWrapper p) {\n    p.value++;\n}\n\nint x = 3;\nIntWrapper wrap = new IntWrapper(x);\nincrement(wrap);\nx = wrap.value;\nSystem.out.println(x);"}
{"input": "int arr[] = {1, 2, 3};\nint* p = arr;\nstd::cout << *(p + 1);", "output": "int[] arr = {1, 2, 3};\nSystem.out.println(arr[1]);"}
{"input": "int* allocate() {\n    return new int(42);\n}", "output": "Integer allocate() {\n    return Integer.valueOf(42);\n}"}
{"input": "int x = 10;\nint* ptr = nullptr;\nptr = &x;\nstd::cout << *ptr;", "output": "int x = 10;\nInteger ref = x;\nSystem.out.println(ref);"}
{"input": "struct Point {\n    int x, y;\n};\n\nPoint* create() {\n    return new Point{1, 2};\n}", "output": "class Point {\n    int x, y;\n    Point(int x, int y) { this.x = x; this.y = y; }\n}\n\nPoint create() {\n    return new Point(1, 2);\n}"}
{"input": "int x = 9;\nint* p = &x;\nint* q = p;\nstd::cout << *q;", "output": "int x = 9;\nInteger ref = x;\nInteger alias = ref;\nSystem.out.println(alias);"}
{"input": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}", "output": "void swap(IntWrapper a, IntWrapper b) {\n    int temp = a.value;\n    a.value = b.value;\n    b.value = temp;\n}"}
{"input": "int* p = new int[3];\np[0] = 1;\np[1] = 2;\np[2] = 3;", "output": "int[] p = new int[3];\np[0] = 1;\np[1] = 2;\np[2] = 3;"}
{"input": "int x = 5;\nint* p = &x;\nint** pp = &p;\nstd::cout << **pp;", "output": "int x = 5;\nInteger ref = x;\nInteger refToRef = ref;\nSystem.out.println(refToRef);"}
{"input": "struct Node {\n    int data;\n    Node* next;\n};\n\nNode* createList() {\n    Node* head = new Node{1, nullptr};\n    head->next = new Node{2, nullptr};\n    return head;\n}", "output": "class Node {\n    int data;\n    Node next;\n    Node(int data) { this.data = data; }\n}\n\nNode createList() {\n    Node head = new Node(1);\n    head.next = new Node(2);\n    return head;\n}"}
{"input": "void setToNull(int** p) {\n    *p = nullptr;\n}", "output": "void setToNull(RefWrapper<Integer> p) {\n    p.value = null;\n}"}
{"input": "int* p = new int[5];\nfor (int i = 0; i < 5; ++i) {\n    p[i] = i * i;\n}", "output": "int[] p = new int[5];\nfor (int i = 0; i < 5; i++) {\n    p[i] = i * i;\n}"}
{"input": "int** matrix = new int*[3];\nfor (int i = 0; i < 3; ++i)\n    matrix[i] = new int[3];", "output": "int[][] matrix = new int[3][3];"}
{"input": "struct Wrapper {\n    int* value;\n};\n\nWrapper create() {\n    int* p = new int(10);\n    return Wrapper{p};\n}", "output": "class Wrapper {\n    Integer value;\n    Wrapper(Integer value) { this.value = value; }\n}\n\nWrapper create() {\n    return new Wrapper(10);\n}"}
{"input": "int a = 10;\nint b = 20;\nint* arr[2] = {&a, &b};\nstd::cout << *arr[1];", "output": "int a = 10;\nint b = 20;\nInteger[] arr = {a, b};\nSystem.out.println(arr[1]);"}
{"input": "struct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n};\n\nTreeNode* createNode(int v) {\n    return new TreeNode{v, nullptr, nullptr};\n}", "output": "class TreeNode {\n    int val;\n    TreeNode left, right;\n    TreeNode(int v) { this.val = v; }\n}\n\nTreeNode createNode(int v) {\n    return new TreeNode(v);\n}"}
{"input": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint x = 1, y = 2;\nswap(&x, &y);", "output": "class IntWrapper { int value; IntWrapper(int v) { value = v; } }\n\nvoid swap(IntWrapper a, IntWrapper b) {\n    int temp = a.value;\n    a.value = b.value;\n    b.value = temp;\n}\n\nIntWrapper x = new IntWrapper(1);\nIntWrapper y = new IntWrapper(2);\nswap(x, y);"}
{"input": "int x = 5;\nvoid* ptr = &x;\nstd::cout << *(int*)ptr;", "output": "int x = 5;\nObject ptr = x;\nSystem.out.println((int) ptr);"}
{"input": "struct Point {\n    int x;\n    int y;\n};", "output": "record Point(int x, int y) {}"}
{"input": "struct Rectangle {\n    int width;\n    int height;\n};", "output": "record Rectangle(int width, int height) {}"}
{"input": "struct Person {\n    std::string name;\n    int age;\n};", "output": "record Person(String name, int age) {}"}
{"input": "struct Book {\n    std::string title;\n    std::string author;\n    int pages;\n};", "output": "record Book(String title, String author, int pages) {}"}
{"input": "struct RGB {\n    int red;\n    int green;\n    int blue;\n};", "output": "record RGB(int red, int green, int blue) {}"}
{"input": "struct Employee {\n    int id;\n    std::string name;\n    double salary;\n};", "output": "record Employee(int id, String name, double salary) {}"}
{"input": "struct Complex {\n    double real;\n    double imag;\n};", "output": "record Complex(double real, double imag) {}"}
{"input": "struct Vector3D {\n    float x;\n    float y;\n    float z;\n};", "output": "record Vector3D(float x, float y, float z) {}"}
{"input": "struct Address {\n    std::string city;\n    std::string street;\n    int zip;\n};", "output": "record Address(String city, String street, int zip) {}"}
{"input": "struct Time {\n    int hour;\n    int minute;\n    int second;\n};", "output": "record Time(int hour, int minute, int second) {}"}
{"input": "struct Temperature {\n    float celsius;\n\n    float toFahrenheit() {\n        return celsius * 9 / 5 + 32;\n    }\n};", "output": "record Temperature(float celsius) {\n    public float toFahrenheit() {\n        return celsius * 9 / 5 + 32;\n    }\n}"}
{"input": "struct Student {\n    std::string name;\n    int score;\n\n    bool hasPassed() {\n        return score >= 50;\n    }\n};", "output": "record Student(String name, int score) {\n    public boolean hasPassed() {\n        return score >= 50;\n    }\n}"}
{"input": "struct Circle {\n    double radius;\n\n    double area() {\n        return 3.14159 * radius * radius;\n    }\n};", "output": "record Circle(double radius) {\n    public double area() {\n        return Math.PI * radius * radius;\n    }\n}"}
{"input": "struct Rectangle {\n    double width;\n    double height;\n\n    double area() {\n        return width * height;\n    }\n};", "output": "record Rectangle(double width, double height) {\n    public double area() {\n        return width * height;\n    }\n}"}
{"input": "struct ComplexNumber {\n    double real;\n    double imag;\n\n    double magnitude() {\n        return sqrt(real * real + imag * imag);\n    }\n};", "output": "record ComplexNumber(double real, double imag) {\n    public double magnitude() {\n        return Math.sqrt(real * real + imag * imag);\n    }\n}"}
{"input": "struct Employee {\n    std::string name;\n    double salary;\n\n    double annualSalary() {\n        return salary * 12;\n    }\n};", "output": "record Employee(String name, double salary) {\n    public double annualSalary() {\n        return salary * 12;\n    }\n}"}
{"input": "struct Point2D {\n    int x;\n    int y;\n\n    int manhattanDistance() {\n        return abs(x) + abs(y);\n    }\n};", "output": "record Point2D(int x, int y) {\n    public int manhattanDistance() {\n        return Math.abs(x) + Math.abs(y);\n    }\n}"}
{"input": "struct Time {\n    int hours;\n    int minutes;\n\n    int toMinutes() {\n        return hours * 60 + minutes;\n    }\n};", "output": "record Time(int hours, int minutes) {\n    public int toMinutes() {\n        return hours * 60 + minutes;\n    }\n}"}
{"input": "struct Book {\n    std::string title;\n    int pages;\n\n    bool isLong() {\n        return pages > 300;\n    }\n};", "output": "record Book(String title, int pages) {\n    public boolean isLong() {\n        return pages > 300;\n    }\n}"}
{"input": "struct Account {\n    int id;\n    double balance;\n\n    void deposit(double amount) {\n        balance += amount;\n    }\n};", "output": "record Account(int id, double balance) {\n    public Account deposit(double amount) {\n        return new Account(id, balance + amount);\n    }\n}"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 5, 3, 2};\nstd::sort(v.begin(), v.end());", "output": "List<Integer> v = new ArrayList<>(List.of(1, 5, 3, 2));\nCollections.sort(v);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3, 4};\nbool all_even = std::all_of(v.begin(), v.end(), [](int i){ return i % 2 == 0; });", "output": "List<Integer> v = List.of(1, 2, 3, 4);\nboolean allEven = v.stream().allMatch(i -> i % 2 == 0);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3};\nbool any_negative = std::any_of(v.begin(), v.end(), [](int i){ return i < 0; });", "output": "List<Integer> v = List.of(1, 2, 3);\nboolean anyNegative = v.stream().anyMatch(i -> i < 0);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3, 4};\nbool none_zero = std::none_of(v.begin(), v.end(), [](int i){ return i == 0; });", "output": "List<Integer> v = List.of(1, 2, 3, 4);\nboolean noneZero = v.stream().noneMatch(i -> i == 0);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3};\nint sum = std::accumulate(v.begin(), v.end(), 0);", "output": "List<Integer> v = List.of(1, 2, 3);\nint sum = v.stream().mapToInt(Integer::intValue).sum();"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {5, 3, 8};\nint max = *std::max_element(v.begin(), v.end());", "output": "List<Integer> v = List.of(5, 3, 8);\nint max = Collections.max(v);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {2, 4, 6};\nint min = *std::min_element(v.begin(), v.end());", "output": "List<Integer> v = List.of(2, 4, 6);\nint min = Collections.min(v);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3, 4};\nstd::reverse(v.begin(), v.end());", "output": "List<Integer> v = new ArrayList<>(List.of(1, 2, 3, 4));\nCollections.reverse(v);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3, 2};\nint count = std::count(v.begin(), v.end(), 2);", "output": "List<Integer> v = List.of(1, 2, 3, 2);\nlong count = v.stream().filter(i -> i == 2).count();"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3};\nauto it = std::find(v.begin(), v.end(), 2);", "output": "List<Integer> v = List.of(1, 2, 3);\nint index = v.indexOf(2);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {3, 1, 4, 1, 5};\nstd::sort(v.begin(), v.end(), std::greater<int>());", "output": "List<Integer> v = new ArrayList<>(List.of(3, 1, 4, 1, 5));\nv.sort(Comparator.reverseOrder());"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v(10);\nstd::iota(v.begin(), v.end(), 1);", "output": "List<Integer> v = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3, 4};\nstd::rotate(v.begin(), v.begin() + 1, v.end());", "output": "List<Integer> v = new ArrayList<>(List.of(1, 2, 3, 4));\nCollections.rotate(v, -1);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v1 = {1, 2};\nstd::vector<int> v2 = {3, 4};\nv1.swap(v2);", "output": "List<Integer> v1 = new ArrayList<>(List.of(1, 2));\nList<Integer> v2 = new ArrayList<>(List.of(3, 4));\nList<Integer> temp = new ArrayList<>(v1);\nv1.clear(); v1.addAll(v2);\nv2.clear(); v2.addAll(temp);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3, 2, 1};\nv.erase(std::remove(v.begin(), v.end(), 2), v.end());", "output": "List<Integer> v = new ArrayList<>(List.of(1, 2, 3, 2, 1));\nv.removeIf(i -> i == 2);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3};\nstd::next_permutation(v.begin(), v.end());", "output": "List<Integer> v = new ArrayList<>(List.of(1, 2, 3));\nCollections.swap(v, 1, 2); // no direct next_permutation in Java"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {4, 2, 1, 3};\nbool sorted = std::is_sorted(v.begin(), v.end());", "output": "List<Integer> v = List.of(4, 2, 1, 3);\nboolean sorted = IntStream.range(0, v.size() - 1).allMatch(i -> v.get(i) <= v.get(i + 1));"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3};\nstd::for_each(v.begin(), v.end(), [](int& x){ x *= 2; });", "output": "List<Integer> v = new ArrayList<>(List.of(1, 2, 3));\nv.replaceAll(i -> i * 2);"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 2, 3};\nbool has2 = std::binary_search(v.begin(), v.end(), 2);", "output": "List<Integer> v = List.of(1, 2, 3);\nboolean has2 = Collections.binarySearch(v, 2) >= 0;"}
{"input": "#include <algorithm>\n#include <vector>\nstd::vector<int> v = {1, 3, 2};\nstd::nth_element(v.begin(), v.begin() + 1, v.end());", "output": "List<Integer> v = new ArrayList<>(List.of(1, 3, 2));\nv.sort(Integer::compare);\n// Java has no nth_element equivalent"}

  
