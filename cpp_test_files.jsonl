{"filename": "05.cpp", "content": "//Sztring\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nclass StringUtils {\npublic:\n    static std::string reverse(const std::string& input) {\n        std::string result = input;\n        std::reverse(result.begin(), result.end());\n        return result;\n    }\n\n    static std::string toLowerCase(const std::string& input) {\n        std::string result = input;\n        std::transform(result.begin(), result.end(), result.begin(),\n                       [](unsigned char c) { return std::tolower(c); });\n        return result;\n    }\n\n    static std::string toUpperCase(const std::string& input) {\n        std::string result = input;\n        std::transform(result.begin(), result.end(), result.begin(),\n                       [](unsigned char c) { return std::toupper(c); });\n        return result;\n    }\n};"}
{"filename": "07.cpp", "content": "//Vector\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {4, 5, 6};\n\n    numbers.push_back(10);\n    numbers.push_back(20);\n    numbers.push_back(30);\n\n    std::cout << \"Elements in the vector: \";\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    std::cout << \"The second element is: \" << numbers[1] << std::endl;\n\n    std::cout << \"The size of the vector is: \" << numbers.size() << std::endl;\n\n    return 0;\n}\n\n"}
{"filename": "10.cpp", "content": "//Öröklődés2\n#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Identifiable {\npublic:\n    virtual string getId() const = 0;\n    virtual ~Identifiable() {}\n};\n\nclass City : public Identifiable {\nprotected:\n    string name;\n    int population;\n\npublic:\n    City(const string& name, int population)\n        : name(name), population(population) {}\n\n    string getId() const override {\n        return \"City ID: \" + name;\n    }\n};"}
{"filename": "12.cpp", "content": "//STL algo\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint main() {\n    vector<pair<string, int>> students = {\n        {\"John Doe\", 20},\n        {\"Jane Smith\", 22},\n        {\"Alice Johnson\", 19},\n        {\"Bob Brown\", 23},\n        {\"Charlie Davis\", 21}\n    };\n\n    // 1. sort\n    cout << \"Students sorted by age:\" << endl;\n    sort(students.begin(), students.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;  // Rendezés életkor szerint (a.second az életkor)\n    });\n    for (const auto& student : students) {\n        cout << \"Name: \" << student.first << \", Age: \" << student.second << endl;\n    }\n    cout << endl;\n\n    // 2. find\n    string search_name = \"Jane Smith\";\n    auto it = find_if(students.begin(), students.end(), [&search_name](const pair<string, int>& student) {\n        return student.first == search_name;\n    });\n\n    if (it != students.end()) {\n        cout << \"Student found: Name: \" << it->first << \", Age: \" << it->second << endl;\n    } else {\n        cout << \"Student not found!\" << endl;\n    }\n    cout << endl;\n\n    // 3. erase\n    students.erase(remove_if(students.begin(), students.end(), [](const pair<string, int>& student) {\n        return student.first == \"Alice Johnson\";  // Törlés név alapján\n    }), students.end());\n\n    cout << \"Students after deletion:\" << endl;\n    for (const auto& student : students) {\n        cout << \"Name: \" << student.first << \", Age: \" << student.second << endl;\n    }\n    cout << endl;\n\n    // 4. max\n    auto max_age_student = *max_element(students.begin(), students.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;  // Maximális életkor alapján\n    });\n\n    cout << \"The oldest student: Name: \" << max_age_student.first << \", Age: \" << max_age_student.second << endl;\n\n    return 0;\n}\n"}
{"filename": "13.cpp", "content": "//define\n#include <iostream>\n#include <vector>\n\n#define ZIPCODE 1234\n\nint main() {\n    std::vector<int> postalCodes = {3333, 4444, 5555, 1234, 9999};\n\n    for (int code : postalCodes) {\n        if (code == ZIPCODE) {\n            std::cout << \"Found ZIP code: \" << ZIPCODE << \"!\\n\";\n        }\n    }\n\n    return 0;\n}"}
{"filename": "16.cpp", "content": "//Konstans\n#include <iostream>\n#include <string>\n\nclass Day {\nprivate:\n    const std::string name;\n    int temperature;\n\npublic:\n    Day(const std::string& dayName, int temp)\n        : name(dayName), temperature(temp) {}\n\n    std::string getName() const {\n        return name;\n    }\n\n    int getTemperature() const {\n        return temperature;\n    }\n\n    void setTemperature(int newTemp) {\n        temperature = newTemp;\n    }\n\n    void printDayInfo(const std::string& prefix) const {\n        std::cout << prefix << \" \" << name << \" has \" << temperature << \" degrees.\\n\";\n    }\n};"}
{"filename": "17.cpp", "content": "//file\n#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inFile(\"simple_example.txt\");\n    std::string line;\n    while (std::getline(inFile, line)) {\n        std::cout << line << std::endl;\n    }\n    inFile.close();\n    return 0;\n}"}
{"filename": "18.cpp", "content": "//Template\n#include <iostream>\n#include <string>\n\ntemplate <typename T>\nclass Stats {\nprivate:\n    T statValue;\n\npublic:\n    Stats(T value) : statValue(value) {}\n};"}
{"filename": "19.cpp", "content": "//Template2\n#include <iostream>\n\ntemplate <typename T>\nT square(T value) {\n    return value * value;\n}"}
{"filename": "21.cpp", "content": "//file\n#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ofstream outFile(\"simple_example.txt\");\n    outFile << \"Hello, this is a simple file write example.\" << std::endl;\n    outFile.close();\n    return 0;\n}"}
{"filename": "26.cpp", "content": "//date\n#include <iostream>\n#include <ctime>\n\nint main() {\n    std::time_t now = std::time(nullptr);\n    std::cout << std::ctime(&now);\n    return 0;\n}"}
{"filename": "36.cpp", "content": "//+,-, *, /\n#include <iostream>\n\nint main() {\n    double a = 12.5;\n    double b = 3.5;\n\n    std::cout << \"Addition: \" << (a + b) << '\\n';\n    std::cout << \"Subtraction: \" << (a - b) << '\\n';\n    std::cout << \"Multiplication: \" << (a * b) << '\\n';\n\n    if (b != 0) {\n        std::cout << \"Division: \" << (a / b) << '\\n';\n    } else {\n        std::cout << \"Division: Error (division by zero)\\n\";\n    } \n\n    return 0;\n}"}
{"filename": "39.cpp", "content": "//szálkezekés\n#include <iostream>\n#include <thread>\n\nvoid helloWorld() {\n    std::cout << \"Hello from the thread!\" << std::endl;\n}\n\nint main() {\n    std::thread t(helloWorld);\n    t.join();\n    std::cout << \"Hello from main!\" << std::endl;\n    return 0;\n}"}
{"filename": "45.cpp", "content": "//sztring\n#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nint main() {\n    string str = \"Hello World!\";\n    \n    for (char& c : str) {\n        c = toupper(c);\n    }\n    \n    cout << \"Uppercase: \" << str << endl;\n    return 0;\n}"}
{"filename": "49.cpp", "content": "//fib\n#include <iostream>\n\nint main() {\n    int n = 10;\n    int first = 0;\n    int second = 1;\n    int next;\n\n    std::cout << \"Fibonacci series: \";\n    for (int i = 0; i < n; ++i) {\n        if (i <= 1) {\n            next = i;\n        } else {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        std::cout << next << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}"}
{"filename": "56.cpp", "content": "//try-catch\n#include <iostream>\n#include <stdexcept>\n\nint main() {\n    try {\n        int num = 10;\n        int den = 0;\n\n        if (den == 0) {\n            throw std::invalid_argument(\"Cannot divide by zero.\");\n        }\n\n        std::cout << \"Result: \" << num / den << std::endl;\n    }\n    catch (const std::exception& e) {\n        std::cout << \"Error: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}"}
{"filename": "57.cpp", "content": "#include <iostream>\n#include <string>\n\nclass Car {\nprivate:\n    std::string brand;\n    int year;\n\npublic:\n    Car(const std::string& b, int y) : brand(b), year(y) {}\n\n    void displayInfo() {\n        std::cout << \"Brand: \" << brand << \", Year: \" << year << std::endl;\n    }\n\n    std::string getBrand() {\n        return brand;\n    }\n\n    void setBrand(const std::string& b) {\n        brand = b;\n    }\n\n    void setYear(int y) {\n        year = y;\n    }\n\n    int getYear() {\n        return year;\n    }\n\nprotected:\n    int mileage;\n\n    void setMileage(int m) {\n        mileage = m;\n    }\n\npublic:\n    void updateMileage(int m) {\n        setMileage(m);\n    }\n\n    void displayMileage() {\n        std::cout << \"Mileage: \" << mileage << \" km\" << std::endl;\n    }\n};"}